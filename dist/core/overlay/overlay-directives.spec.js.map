{"version":3,"file":"overlay-directives.spec.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/core/overlay/overlay-directives.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,wBAMO,uBAAuB,CAAC,CAAA;AAC/B,wBAAqD,2BAA2B,CAAC,CAAA;AACjF,qBAAmC,eAAe,CAAC,CAAA;AACnD,mCAAuD,sBAAsB,CAAC,CAAA;AAC9E,wBAAsB,WAAW,CAAC,CAAA;AAClC,kCAA+B,qBAAqB,CAAC,CAAA;AACrD,+BAA4B,2BAA2B,CAAC,CAAA;AACxD,yCAAqC,qCAAqC,CAAC,CAAA;AAC3E,4CAAwC,wCAAwC,CAAC,CAAA;AAEjF,QAAQ,CAAC,oBAAoB,EAAE;IAC7B,IAAI,OAA6B,CAAC;IAClC,IAAI,uBAAoC,CAAC;IACzC,IAAI,OAAwD,CAAC;IAE7D,UAAU,CAAC;QACT,sBAAY,CAAC;YACX,iBAAO;YACP,iDAAsB;YACtB,8BAAa;YACb,EAAC,OAAO,EAAE,oCAAgB,EAAE,UAAU,EAAE;oBACtC,MAAM,CAAC;wBACL,mBAAmB,EAAE;4BACpB,uBAAuB,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;4BACvD,MAAM,CAAC,uBAAuB,CAAC;wBACjC,CAAC;qBACF,CAAC;gBACJ,CAAC,EAAC;SACH,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,gBAAM,CAAC,CAAC,8BAAoB,CAAC,EAAE,UAAC,GAAyB;QAClE,OAAO,GAAG,GAAG,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC;IAEJ,UAAU,CAAC,eAAK,CAAC;QACf,OAAO,CAAC,WAAW,CAAC,6BAA6B,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;YACvD,OAAO,GAAG,CAAC,CAAC;YACZ,OAAO,CAAC,aAAa,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,8DAA8D,EAAE;QACjE,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,mBAAS,CAAC;QACzE,OAAO,CAAC,OAAO,EAAE,CAAC;QAClB,yBAAe,EAAE,CAAC;QAElB,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,0EAA0E,EAAE;QAC7E,IAAI,aAAa,GACb,OAAO,CAAC,YAAY,CAAC,iBAAiB,CAAC;QAC3C,IAAI,gBAAgB,GAAG,aAAa,CAAC,yBAAyB,CAAC;QAE/D,IAAI,QAAQ,GACoB,gBAAgB,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CAAC;QACxF,MAAM,CAAC,QAAQ,CAAC,CAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,uDAAyB,CAAC,CAAC,CAAC;QAElE,IAAI,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;QACnC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAWH;IAAA;IAEA,CAAC;IADC;QAAC,gBAAS,CAAC,8CAAyB,CAAC;;oFAAA;IATvC;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,yKAIE;YACZ,UAAU,EAAE,CAAC,8CAAyB,EAAE,kCAAa,CAAC;SACvD,CAAC;;qCAAA;IAGF,oCAAC;AAAD,CAAC,AAFD,IAEC","sourcesContent":["import {\r\n    inject,\r\n    async,\r\n    fakeAsync,\r\n    flushMicrotasks,\r\n    addProviders,\r\n} from '@angular/core/testing';\r\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\r\nimport {Component, ViewChild} from '@angular/core';\r\nimport {ConnectedOverlayDirective, OverlayOrigin} from './overlay-directives';\r\nimport {Overlay} from './overlay';\r\nimport {OverlayContainer} from './overlay-container';\r\nimport {ViewportRuler} from './position/viewport-ruler';\r\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\r\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\r\n\r\ndescribe('Overlay directives', () => {\r\n  let builder: TestComponentBuilder;\r\n  let overlayContainerElement: HTMLElement;\r\n  let fixture: ComponentFixture<ConnectedOverlayDirectiveTest>;\r\n\r\n  beforeEach(() => {\r\n    addProviders([\r\n      Overlay,\r\n      OverlayPositionBuilder,\r\n      ViewportRuler,\r\n      {provide: OverlayContainer, useFactory: () => {\r\n        return {\r\n          getContainerElement: () => {\r\n           overlayContainerElement = document.createElement('div');\r\n            return overlayContainerElement;\r\n          }\r\n        };\r\n      }},\r\n    ]);\r\n  });\r\n\r\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\r\n    builder = tcb;\r\n  }));\r\n\r\n  beforeEach(async(() => {\r\n    builder.createAsync(ConnectedOverlayDirectiveTest).then(f => {\r\n      fixture = f;\r\n      fixture.detectChanges();\r\n    });\r\n  }));\r\n\r\n  it(`should create an overlay and attach the directive's template`, () => {\r\n    expect(overlayContainerElement.textContent).toContain('Menu content');\r\n  });\r\n\r\n  it('should destroy the overlay when the directive is destroyed', fakeAsync(() => {\r\n    fixture.destroy();\r\n    flushMicrotasks();\r\n\r\n    expect(overlayContainerElement.textContent.trim()).toBe('');\r\n  }));\r\n\r\n  it('should use a connected position strategy with a default set of positions', () => {\r\n    let testComponent: ConnectedOverlayDirectiveTest =\r\n        fixture.debugElement.componentInstance;\r\n    let overlayDirective = testComponent.connectedOverlayDirective;\r\n\r\n    let strategy =\r\n        <ConnectedPositionStrategy> overlayDirective.overlayRef.getState().positionStrategy;\r\n    expect(strategy) .toEqual(jasmine.any(ConnectedPositionStrategy));\r\n\r\n    let positions = strategy.positions;\r\n    expect(positions.length).toBeGreaterThan(0);\r\n  });\r\n});\r\n\r\n\r\n@Component({\r\n  template: `\r\n  <button overlay-origin #trigger=\"overlayOrigin\">Toggle menu</button>\r\n  <template connected-overlay [origin]=\"trigger\">\r\n    <p>Menu content</p>\r\n  </template>`,\r\n  directives: [ConnectedOverlayDirective, OverlayOrigin],\r\n})\r\nclass ConnectedOverlayDirectiveTest {\r\n  @ViewChild(ConnectedOverlayDirective) connectedOverlayDirective: ConnectedOverlayDirective;\r\n}\r\n"]}