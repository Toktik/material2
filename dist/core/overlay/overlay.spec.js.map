{"version":3,"file":"overlay.spec.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/core/overlay/overlay.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  inject,\r\n  fakeAsync,\r\n  flushMicrotasks,\r\n  addProviders,\r\n} from '@angular/core/testing';\r\nimport {TestComponentBuilder} from '@angular/compiler/testing';\r\nimport {\r\n  Component,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {TemplatePortalDirective} from '../portal/portal-directives';\r\nimport {TemplatePortal, ComponentPortal} from '../portal/portal';\r\nimport {Overlay} from './overlay';\r\nimport {OverlayContainer} from './overlay-container';\r\nimport {OverlayRef} from './overlay-ref';\r\nimport {OverlayState} from './overlay-state';\r\nimport {PositionStrategy} from './position/position-strategy';\r\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\r\nimport {ViewportRuler} from './position/viewport-ruler';\r\n\r\n\r\ndescribe('Overlay', () => {\r\n  let builder: TestComponentBuilder;\r\n  let overlay: Overlay;\r\n  let componentPortal: ComponentPortal<PizzaMsg>;\r\n  let templatePortal: TemplatePortal;\r\n  let overlayContainerElement: HTMLElement;\r\n\r\n  beforeEach(() => {\r\n    addProviders([\r\n      Overlay,\r\n      OverlayPositionBuilder,\r\n      ViewportRuler,\r\n      {provide: OverlayContainer, useFactory: () => {\r\n        return {\r\n          getContainerElement: () => {\r\n            if (overlayContainerElement) { return overlayContainerElement; }\r\n            overlayContainerElement = document.createElement('div');\r\n            return overlayContainerElement;\r\n          }\r\n        };\r\n      }}\r\n    ]);\r\n  });\r\n\r\n  let deps = [TestComponentBuilder, Overlay];\r\n  beforeEach(inject(deps, fakeAsync((tcb: TestComponentBuilder, o: Overlay) => {\r\n    builder = tcb;\r\n    overlay = o;\r\n\r\n    builder.createAsync(TestComponentWithTemplatePortals).then(fixture => {\r\n      fixture.detectChanges();\r\n      templatePortal = fixture.componentInstance.templatePortal;\r\n      componentPortal = new ComponentPortal(PizzaMsg, fixture.componentInstance.viewContainerRef);\r\n    });\r\n\r\n    flushMicrotasks();\r\n  })));\r\n\r\n  it('should load a component into an overlay', fakeAsyncTest(() => {\r\n    let overlayRef: OverlayRef;\r\n\r\n    overlay.create().then(ref => {\r\n      overlayRef = ref;\r\n      overlayRef.attach(componentPortal);\r\n    });\r\n\r\n    flushMicrotasks();\r\n\r\n    expect(overlayContainerElement.textContent).toContain('Pizza');\r\n\r\n    overlayRef.dispose();\r\n    expect(overlayContainerElement.childNodes.length).toBe(0);\r\n    expect(overlayContainerElement.textContent).toBe('');\r\n  }));\r\n\r\n  it('should load a template portal into an overlay', fakeAsyncTest(() => {\r\n    let overlayRef: OverlayRef;\r\n\r\n    overlay.create().then(ref => {\r\n      overlayRef = ref;\r\n      overlayRef.attach(templatePortal);\r\n    });\r\n\r\n    flushMicrotasks();\r\n\r\n    expect(overlayContainerElement.textContent).toContain('Cake');\r\n\r\n    overlayRef.dispose();\r\n    expect(overlayContainerElement.childNodes.length).toBe(0);\r\n    expect(overlayContainerElement.textContent).toBe('');\r\n  }));\r\n\r\n  it('should open multiple overlays', fakeAsyncTest(() => {\r\n    let pizzaOverlayRef: OverlayRef;\r\n    let cakeOverlayRef: OverlayRef;\r\n\r\n    overlay.create().then(ref => {\r\n      pizzaOverlayRef = ref;\r\n      pizzaOverlayRef.attach(componentPortal);\r\n    });\r\n\r\n    flushMicrotasks();\r\n\r\n    overlay.create().then(ref => {\r\n      cakeOverlayRef = ref;\r\n      cakeOverlayRef.attach(templatePortal);\r\n    });\r\n\r\n    flushMicrotasks();\r\n\r\n    expect(overlayContainerElement.childNodes.length).toBe(2);\r\n    expect(overlayContainerElement.textContent).toContain('Pizza');\r\n    expect(overlayContainerElement.textContent).toContain('Cake');\r\n\r\n    pizzaOverlayRef.dispose();\r\n    expect(overlayContainerElement.childNodes.length).toBe(1);\r\n    expect(overlayContainerElement.textContent).toContain('Cake');\r\n\r\n    cakeOverlayRef.dispose();\r\n    expect(overlayContainerElement.childNodes.length).toBe(0);\r\n    expect(overlayContainerElement.textContent).toBe('');\r\n  }));\r\n\r\n  describe('applyState', () => {\r\n    let state: OverlayState;\r\n\r\n    beforeEach(() => {\r\n      state = new OverlayState();\r\n    });\r\n\r\n    it('should apply the positioning strategy', fakeAsyncTest(() => {\r\n      state.positionStrategy = new FakePositionStrategy();\r\n\r\n      overlay.create(state).then(ref => {\r\n        ref.attach(componentPortal);\r\n      });\r\n\r\n      flushMicrotasks();\r\n\r\n      expect(overlayContainerElement.querySelectorAll('.fake-positioned').length).toBe(1);\r\n    }));\r\n  });\r\n});\r\n\r\n\r\n/** Simple component for testing ComponentPortal. */\r\n@Component({\r\n  selector: 'pizza-msg',\r\n  template: '<p>Pizza</p>',\r\n})\r\nclass PizzaMsg {\r\n}\r\n\r\n\r\n/** Test-bed component that contains a TempatePortal and an ElementRef. */\r\n@Component({\r\n  selector: 'portal-test',\r\n  template: `<template portal>Cake</template>`,\r\n  directives: [TemplatePortalDirective],\r\n})\r\nclass TestComponentWithTemplatePortals {\r\n  @ViewChild(TemplatePortalDirective) templatePortal: TemplatePortalDirective;\r\n\r\n  constructor(public viewContainerRef: ViewContainerRef) {\r\n  }\r\n}\r\n\r\nclass FakePositionStrategy implements PositionStrategy {\r\n  apply(element: Element): Promise<void> {\r\n    element.classList.add('fake-positioned');\r\n    return Promise.resolve();\r\n  }\r\n\r\n}\r\n\r\nfunction fakeAsyncTest(fn: () => void) {\r\n  return inject([], fakeAsync(fn));\r\n}\r\n"]}