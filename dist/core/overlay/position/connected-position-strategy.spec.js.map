{"version":3,"file":"connected-position-strategy.spec.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/core/overlay/position/connected-position-strategy.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {ElementRef} from '@angular/core';\r\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\r\nimport {ViewportRuler} from './viewport-ruler';\r\nimport {OverlayPositionBuilder} from './overlay-position-builder';\r\n\r\n\r\n// Default width and height of the overlay and origin panels throughout these tests.\r\nconst DEFAULT_HEIGHT = 30;\r\nconst DEFAULT_WIDTH = 60;\r\n\r\n// For all tests, we assume the browser window is 1024x786 (outerWidth x outerHeight).\r\n// The karma config has been set to this for local tests, and it is the default size\r\n// for tests on CI (both SauceLabs and Browserstack).\r\n\r\ndescribe('ConnectedPositionStrategy', () => {\r\n  const ORIGIN_HEIGHT = DEFAULT_HEIGHT;\r\n  const ORIGIN_WIDTH = DEFAULT_WIDTH;\r\n  const OVERLAY_HEIGHT = DEFAULT_HEIGHT;\r\n  const OVERLAY_WIDTH = DEFAULT_WIDTH;\r\n\r\n  let originElement: HTMLElement;\r\n  let overlayElement: HTMLElement;\r\n  let strategy: ConnectedPositionStrategy;\r\n  let fakeElementRef: ElementRef;\r\n  let fakeViewportRuler: FakeViewportRuler;\r\n  let positionBuilder: OverlayPositionBuilder;\r\n\r\n  let originRect: ClientRect;\r\n  let originCenterX: number;\r\n  let originCenterY: number;\r\n\r\n  beforeEach(() => {\r\n    fakeViewportRuler = new FakeViewportRuler();\r\n\r\n    // The origin and overlay elements need to be in the document body in order to have geometry.\r\n    originElement = createPositionedBlockElement();\r\n    overlayElement = createPositionedBlockElement();\r\n    document.body.appendChild(originElement);\r\n    document.body.appendChild(overlayElement);\r\n\r\n    fakeElementRef = new FakeElementRef(originElement);\r\n    positionBuilder = new OverlayPositionBuilder(new ViewportRuler());\r\n  });\r\n\r\n  afterEach(() => {\r\n    document.body.removeChild(originElement);\r\n    document.body.removeChild(overlayElement);\r\n\r\n    // Reset the origin geometry after each test so we don't accidently keep state between tests.\r\n    originRect = null;\r\n    originCenterX = null;\r\n    originCenterY = null;\r\n  });\r\n\r\n  describe('when not near viewport edge, not scrolled', () => {\r\n    // Place the original element close to the center of the window.\r\n    // (1024 / 2, 768 / 2). It's not exact, since outerWidth/Height includes browser\r\n    // chrome, but it doesn't really matter for these tests.\r\n    const ORIGIN_LEFT = 500;\r\n    const ORIGIN_TOP = 350;\r\n\r\n    beforeEach(() => {\r\n      originElement.style.left = `${ORIGIN_LEFT}px`;\r\n      originElement.style.top = `${ORIGIN_TOP}px`;\r\n\r\n      originRect = originElement.getBoundingClientRect();\r\n      originCenterX = originRect.left + (ORIGIN_WIDTH / 2);\r\n      originCenterY = originRect.top + (ORIGIN_HEIGHT / 2);\r\n    });\r\n\r\n    // Preconditions are set, now just run the full set of simple position tests.\r\n    runSimplePositionTests();\r\n  });\r\n\r\n  describe('when scrolled', () => {\r\n    // Place the original element decently far outside the unscrolled document (1024x768).\r\n    const ORIGIN_LEFT = 2500;\r\n    const ORIGIN_TOP = 2500;\r\n\r\n    // Create a very large element that will make the page scrollable.\r\n    let veryLargeElement: HTMLElement = document.createElement('div');\r\n    veryLargeElement.style.width = '4000px';\r\n    veryLargeElement.style.height = '4000px';\r\n\r\n    beforeEach(() => {\r\n      // Scroll the page such that the origin element is roughly in the\r\n      // center of the visible viewport (2500 - 1024/2, 2500 - 768/2).\r\n      document.body.appendChild(veryLargeElement);\r\n      document.body.scrollTop = 2100;\r\n      document.body.scrollLeft = 2100;\r\n\r\n      originElement.style.top = `${ORIGIN_TOP}px`;\r\n      originElement.style.left = `${ORIGIN_LEFT}px`;\r\n\r\n      originRect = originElement.getBoundingClientRect();\r\n      originCenterX = originRect.left + (ORIGIN_WIDTH / 2);\r\n      originCenterY = originRect.top + (ORIGIN_HEIGHT / 2);\r\n    });\r\n\r\n    afterEach(() => {\r\n      document.body.removeChild(veryLargeElement);\r\n      document.body.scrollTop = 0;\r\n      document.body.scrollLeft = 0;\r\n    });\r\n\r\n    // Preconditions are set, now just run the full set of simple position tests.\r\n    runSimplePositionTests();\r\n  });\r\n\r\n  describe('when near viewport edge', () => {\r\n    it('should reposition the overlay if it would go off the top of the screen', () => {\r\n      // We can use the real ViewportRuler in this test since we know that zero is\r\n      // always the top of the viewport.\r\n\r\n      originElement.style.top = '5px';\r\n      originElement.style.left = '200px';\r\n      originRect = originElement.getBoundingClientRect();\r\n\r\n      strategy = positionBuilder.connectedTo(\r\n        fakeElementRef,\r\n        {originX: 'end', originY: 'top'},\r\n        {overlayX: 'end', overlayY: 'bottom'})\r\n        .withFallbackPosition(\r\n          {originX: 'start', originY: 'bottom'},\r\n          {overlayX: 'start', overlayY: 'top'});\r\n\r\n      strategy.apply(overlayElement);\r\n\r\n      let overlayRect = overlayElement.getBoundingClientRect();\r\n      expect(overlayRect.top).toBe(originRect.bottom);\r\n      expect(overlayRect.left).toBe(originRect.left);\r\n    });\r\n\r\n    it('should reposition the overlay if it would go off the left of the screen', () => {\r\n      // We can use the real ViewportRuler in this test since we know that zero is\r\n      // always the left edge of the viewport.\r\n\r\n      originElement.style.top = '200px';\r\n      originElement.style.left = '5px';\r\n      originRect = originElement.getBoundingClientRect();\r\n      originCenterY = originRect.top + (ORIGIN_HEIGHT / 2);\r\n\r\n      strategy = positionBuilder.connectedTo(\r\n        fakeElementRef,\r\n        {originX: 'start', originY: 'bottom'},\r\n        {overlayX: 'end', overlayY: 'top'})\r\n        .withFallbackPosition(\r\n          {originX: 'end', originY: 'center'},\r\n          {overlayX: 'start', overlayY: 'center'});\r\n\r\n      strategy.apply(overlayElement);\r\n\r\n      let overlayRect = overlayElement.getBoundingClientRect();\r\n      expect(overlayRect.top).toBe(originCenterY - (OVERLAY_HEIGHT / 2));\r\n      expect(overlayRect.left).toBe(originRect.right);\r\n    });\r\n\r\n    it('should reposition the overlay if it would go off the bottom of the screen', () => {\r\n      // Use the fake viewport ruler because we don't know *exactly* how big the viewport is.\r\n      fakeViewportRuler.fakeRect = {\r\n        top: 0, left: 0, width: 500, height: 500, right: 500, bottom: 500\r\n      };\r\n      positionBuilder = new OverlayPositionBuilder(fakeViewportRuler);\r\n\r\n      originElement.style.top = '475px';\r\n      originElement.style.left = '200px';\r\n      originRect = originElement.getBoundingClientRect();\r\n\r\n      strategy = positionBuilder.connectedTo(\r\n        fakeElementRef,\r\n        {originX: 'start', originY: 'bottom'},\r\n        {overlayX: 'start', overlayY: 'top'})\r\n        .withFallbackPosition(\r\n          {originX: 'end', originY: 'top'},\r\n          {overlayX: 'end', overlayY: 'bottom'});\r\n\r\n      strategy.apply(overlayElement);\r\n\r\n      let overlayRect = overlayElement.getBoundingClientRect();\r\n      expect(overlayRect.bottom).toBe(originRect.top);\r\n      expect(overlayRect.right).toBe(originRect.right);\r\n    });\r\n\r\n    it('should reposition the overlay if it would go off the right of the screen', () => {\r\n      // Use the fake viewport ruler because we don't know *exactly* how big the viewport is.\r\n      fakeViewportRuler.fakeRect = {\r\n        top: 0, left: 0, width: 500, height: 500, right: 500, bottom: 500\r\n      };\r\n      positionBuilder = new OverlayPositionBuilder(fakeViewportRuler);\r\n\r\n      originElement.style.top = '200px';\r\n      originElement.style.left = '475px';\r\n      originRect = originElement.getBoundingClientRect();\r\n\r\n      strategy = positionBuilder.connectedTo(\r\n        fakeElementRef,\r\n        {originX: 'end', originY: 'center'},\r\n        {overlayX: 'start', overlayY: 'center'})\r\n        .withFallbackPosition(\r\n          {originX: 'start', originY: 'bottom'},\r\n          {overlayX: 'end', overlayY: 'top'});\r\n\r\n      strategy.apply(overlayElement);\r\n\r\n      let overlayRect = overlayElement.getBoundingClientRect();\r\n      expect(overlayRect.top).toBe(originRect.bottom);\r\n      expect(overlayRect.right).toBe(originRect.left);\r\n    });\r\n  });\r\n\r\n\r\n  /**\r\n   * Run all tests for connecting the overlay to the origin such that first preferred\r\n   * position does not go off-screen. We do this because there are several cases where we\r\n   * want to run the exact same tests with different preconditions (e.g., not scroll, scrolled,\r\n   * different element sized, etc.).\r\n   */\r\n  function runSimplePositionTests() {\r\n    it('should position a panel below, left-aligned', () => {\r\n      strategy = positionBuilder.connectedTo(\r\n        fakeElementRef,\r\n        {originX: 'start', originY: 'bottom'},\r\n        {overlayX: 'start', overlayY: 'top'});\r\n\r\n      strategy.apply(overlayElement);\r\n\r\n      let overlayRect = overlayElement.getBoundingClientRect();\r\n      expect(overlayRect.top).toBe(originRect.bottom);\r\n      expect(overlayRect.left).toBe(originRect.left);\r\n    });\r\n\r\n    it('should position to the right, center aligned vertically', () => {\r\n      strategy = positionBuilder.connectedTo(\r\n        fakeElementRef,\r\n        {originX: 'end', originY: 'center'},\r\n        {overlayX: 'start', overlayY: 'center'});\r\n\r\n      strategy.apply(overlayElement);\r\n\r\n      let overlayRect = overlayElement.getBoundingClientRect();\r\n      expect(overlayRect.top).toBe(originCenterY - (OVERLAY_HEIGHT / 2));\r\n      expect(overlayRect.left).toBe(originRect.right);\r\n    });\r\n\r\n    it('should position to the left, below', () => {\r\n      strategy = positionBuilder.connectedTo(\r\n        fakeElementRef,\r\n        {originX: 'start', originY: 'bottom'},\r\n        {overlayX: 'end', overlayY: 'top'});\r\n\r\n      strategy.apply(overlayElement);\r\n\r\n      let overlayRect = overlayElement.getBoundingClientRect();\r\n      expect(overlayRect.top).toBe(originRect.bottom);\r\n      expect(overlayRect.right).toBe(originRect.left);\r\n    });\r\n\r\n    it('should position above, right aligned', () => {\r\n      strategy = positionBuilder.connectedTo(\r\n        fakeElementRef,\r\n        {originX: 'end', originY: 'top'},\r\n        {overlayX: 'end', overlayY: 'bottom'});\r\n\r\n      strategy.apply(overlayElement);\r\n\r\n      let overlayRect = overlayElement.getBoundingClientRect();\r\n      expect(overlayRect.bottom).toBe(originRect.top);\r\n      expect(overlayRect.right).toBe(originRect.right);\r\n    });\r\n\r\n    it('should position below, centered', () => {\r\n      strategy = positionBuilder.connectedTo(\r\n        fakeElementRef,\r\n        {originX: 'center', originY: 'bottom'},\r\n        {overlayX: 'center', overlayY: 'top'});\r\n\r\n      strategy.apply(overlayElement);\r\n\r\n      let overlayRect = overlayElement.getBoundingClientRect();\r\n      expect(overlayRect.top).toBe(originRect.bottom);\r\n      expect(overlayRect.left).toBe(originCenterX - (OVERLAY_WIDTH / 2));\r\n    });\r\n\r\n    it('should center the overlay on the origin', () => {\r\n      strategy = positionBuilder.connectedTo(\r\n        fakeElementRef,\r\n        {originX: 'center', originY: 'center'},\r\n        {overlayX: 'center', overlayY: 'center'});\r\n\r\n      strategy.apply(overlayElement);\r\n\r\n      let overlayRect = overlayElement.getBoundingClientRect();\r\n      expect(overlayRect.top).toBe(originRect.top);\r\n      expect(overlayRect.left).toBe(originRect.left);\r\n    });\r\n  }\r\n\r\n});\r\n\r\n\r\n/** Creates an absolutely positioned, display: block element with a default size. */\r\nfunction createPositionedBlockElement() {\r\n  let element = document.createElement('div');\r\n  element.style.position = 'absolute';\r\n  element.style.top = '0';\r\n  element.style.left = '0';\r\n  element.style.width = `${DEFAULT_WIDTH}px`;\r\n  element.style.height = `${DEFAULT_HEIGHT}px`;\r\n  element.style.backgroundColor = 'rebeccapurple';\r\n  element.style.zIndex = '100';\r\n  return element;\r\n}\r\n\r\n\r\n/** Fake implementation of ViewportRuler that just returns the previously given ClientRect. */\r\nclass FakeViewportRuler implements ViewportRuler {\r\n  fakeRect: ClientRect = {left: 0, top: 0, width: 1014, height: 686, bottom: 686, right: 1014};\r\n  fakeScrollPos: {top: number, left: number} = {top: 0, left: 0};\r\n\r\n  getViewportRect() {\r\n    return this.fakeRect;\r\n  }\r\n\r\n  getViewportScrollPosition(documentRect?: ClientRect): {top: number; left: number} {\r\n    return this.fakeScrollPos;\r\n  }\r\n}\r\n\r\n\r\n/** Fake implementation of ElementRef that is just a simple container for nativeElement. */\r\nclass FakeElementRef implements ElementRef {\r\n  constructor(public nativeElement: HTMLElement) {\r\n  }\r\n}\r\n"]}