{"version":3,"file":"viewport-ruler.spec.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/core/overlay/position/viewport-ruler.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {ViewportRuler} from './viewport-ruler';\r\n\r\n\r\n// For all tests, we assume the browser window is 1024x786 (outerWidth x outerHeight).\r\n// The karma config has been set to this for local tests, and it is the default size\r\n// for tests on CI (both SauceLabs and Browserstack).\r\n\r\n// While we know the *outer* window width/height, the innerWidth and innerHeight depend on the\r\n// the size of the individual browser's chrome, so we have to use window.innerWidth and\r\n// window.innerHeight in the unit test instead of hard-coded values.\r\n\r\ndescribe('ViewportRuler', () => {\r\n  let ruler: ViewportRuler;\r\n\r\n  let startingWindowWidth = window.innerWidth;\r\n  let startingWindowHeight = window.innerHeight;\r\n\r\n  // Create a very large element that will make the page scrollable.\r\n  let veryLargeElement: HTMLElement = document.createElement('div');\r\n  veryLargeElement.style.width = '6000px';\r\n  veryLargeElement.style.height = '6000px';\r\n\r\n  beforeEach(() => {\r\n    ruler = new ViewportRuler();\r\n    scrollTo(0, 0);\r\n  });\r\n\r\n  it('should get the viewport bounds when the page is not scrolled', () => {\r\n    let bounds = ruler.getViewportRect();\r\n    expect(bounds.top).toBe(0);\r\n    expect(bounds.left).toBe(0);\r\n    expect(bounds.bottom).toBe(window.innerHeight);\r\n    expect(bounds.right).toBe(window.innerWidth);\r\n  });\r\n\r\n  it('should get the viewport bounds when the page is scrolled', () => {\r\n    document.body.appendChild(veryLargeElement);\r\n    scrollTo(1500, 2000);\r\n\r\n    let bounds = ruler.getViewportRect();\r\n\r\n    // In the iOS simulator (BrowserStack & SauceLabs), adding the content to the\r\n    // body causes karma's iframe for the test to stretch to fit that content once we attempt to\r\n    // scroll the page. Setting width / height / maxWidth / maxHeight on the iframe does not\r\n    // successfully constrain its size. As such, skip assertions in environments where the\r\n    // window size has changed since the start of the test.\r\n    if (window.innerWidth > startingWindowWidth || window.innerHeight > startingWindowHeight) {\r\n      document.body.removeChild(veryLargeElement);\r\n      return;\r\n    }\r\n\r\n    expect(bounds.top).toBe(2000);\r\n    expect(bounds.left).toBe(1500);\r\n    expect(bounds.bottom).toBe(2000 + window.innerHeight);\r\n    expect(bounds.right).toBe(1500 + window.innerWidth);\r\n\r\n    document.body.removeChild(veryLargeElement);\r\n  });\r\n\r\n  it('should get the bounds based on client coordinates when the page is pinch-zoomed', () => {\r\n    // There is no API to make the browser pinch-zoom, so there's no real way to automate\r\n    // tests for this behavior. Leaving this test here as documentation for the behavior.\r\n  });\r\n\r\n  it('should get the scroll position when the page is not scrolled', () => {\r\n    var scrollPos = ruler.getViewportScrollPosition();\r\n    expect(scrollPos.top).toBe(0);\r\n    expect(scrollPos.left).toBe(0);\r\n  });\r\n\r\n  it('should get the scroll position when the page is scrolled', () => {\r\n    document.body.appendChild(veryLargeElement);\r\n    scrollTo(1500, 2000);\r\n\r\n    // In the iOS simulator (BrowserStack & SauceLabs), adding the content to the\r\n    // body causes karma's iframe for the test to stretch to fit that content once we attempt to\r\n    // scroll the page. Setting width / height / maxWidth / maxHeight on the iframe does not\r\n    // successfully constrain its size. As such, skip assertions in environments where the\r\n    // window size has changed since the start of the test.\r\n    if (window.innerWidth > startingWindowWidth || window.innerHeight > startingWindowHeight) {\r\n      document.body.removeChild(veryLargeElement);\r\n      return;\r\n    }\r\n\r\n    var scrollPos = ruler.getViewportScrollPosition();\r\n    expect(scrollPos.top).toBe(2000);\r\n    expect(scrollPos.left).toBe(1500);\r\n\r\n    document.body.removeChild(veryLargeElement);\r\n  });\r\n});\r\n"]}