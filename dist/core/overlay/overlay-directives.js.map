{"version":3,"file":"overlay-directives.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/core/overlay/overlay-directives.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    Directive,\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n    OnInit,\r\n    Input,\r\n    OnDestroy,\r\n    ElementRef\r\n} from '@angular/core';\r\nimport {Overlay} from './overlay';\r\nimport {OverlayRef} from './overlay-ref';\r\nimport {TemplatePortal} from '../portal/portal';\r\nimport {OverlayState} from './overlay-state';\r\nimport {ConnectionPositionPair} from './position/connected-position';\r\n\r\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\r\nlet defaultPositionList = [\r\n  new ConnectionPositionPair(\r\n      {originX: 'start', originY: 'bottom'},\r\n      {overlayX: 'start', overlayY: 'top'}),\r\n  new ConnectionPositionPair(\r\n      {originX: 'start', originY: 'top'},\r\n      {overlayX: 'start', overlayY: 'bottom'}),\r\n];\r\n\r\n\r\n/**\r\n * Directive applied to an element to make it usable as an origin for an Overlay using a\r\n * ConnectedPositionStrategy.\r\n */\r\n@Directive({\r\n  selector: '[overlay-origin]',\r\n  exportAs: 'overlayOrigin',\r\n})\r\nexport class OverlayOrigin {\r\n  constructor(private _elementRef: ElementRef) { }\r\n\r\n  get elementRef() {\r\n    return this._elementRef;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\r\n */\r\n@Directive({\r\n  selector: '[connected-overlay]'\r\n})\r\nexport class ConnectedOverlayDirective implements OnInit, OnDestroy {\r\n  private _overlayRef: OverlayRef;\r\n  private _templatePortal: TemplatePortal;\r\n\r\n  @Input() origin: OverlayOrigin;\r\n  @Input() positions: ConnectionPositionPair[];\r\n\r\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      templateRef: TemplateRef<any>,\r\n      viewContainerRef: ViewContainerRef) {\r\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\r\n  }\r\n\r\n  get overlayRef() {\r\n    return this._overlayRef;\r\n  }\r\n\r\n  /** TODO: internal */\r\n  ngOnInit() {\r\n    this._createOverlay();\r\n  }\r\n\r\n  /** TODO: internal */\r\n  ngOnDestroy() {\r\n    this._destroyOverlay();\r\n  }\r\n\r\n  /** Creates an overlay and attaches this directive's template to it. */\r\n  private _createOverlay() {\r\n    if (!this.positions || !this.positions.length) {\r\n      this.positions = defaultPositionList;\r\n    }\r\n\r\n    let overlayConfig = new OverlayState();\r\n    overlayConfig.positionStrategy =\r\n        this._overlay.position().connectedTo(\r\n            this.origin.elementRef,\r\n            {originX: this.positions[0].overlayX, originY: this.positions[0].originY},\r\n            {overlayX: this.positions[0].overlayX, overlayY: this.positions[0].overlayY});\r\n\r\n    this._overlay.create(overlayConfig).then(ref => {\r\n      this._overlayRef = ref;\r\n      this._overlayRef.attach(this._templatePortal);\r\n    });\r\n  }\r\n\r\n  /** Destroys the overlay created by this directive. */\r\n  private _destroyOverlay() {\r\n    this._overlayRef.dispose();\r\n  }\r\n}\r\n\r\n\r\nexport const OVERLAY_DIRECTIVES = [ConnectedOverlayDirective, OverlayOrigin];\r\n"]}