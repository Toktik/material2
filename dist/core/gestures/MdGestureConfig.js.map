{"version":3,"file":"MdGestureConfig.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/core/gestures/MdGestureConfig.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,iCAAkC,2BAA2B,CAAC,CAAA;AAE9D,2DAA2D;AAE3D;IAAqC,mCAAmB;IAAxD;QAAqC,8BAAmB;QAEtD,gEAAgE;QAChE,WAAM,GAAa;YACjB,MAAM;YACN,WAAW;YACX,SAAS;YACT,WAAW;YACX,UAAU;YACV,WAAW;YACX,OAAO;YACP,YAAY;YACZ,UAAU;YACV,YAAY;YACZ,WAAW;SACZ,CAAC;IA6CJ,CAAC;IA3CC;;;;;;;;;;;SAWK;IACL,qCAAW,GAAX,UAAY,OAAoB;QAC9B,IAAM,EAAE,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;QAE/B,oCAAoC;QACpC,IAAM,IAAI,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,EAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,EAAC,CAAC,CAAC;QAC3D,IAAM,SAAS,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,EAAC,CAAC,CAAC;QACpE,IAAM,KAAK,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,EAAC,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,EAAC,CAAC,CAAC;QAE7D,2FAA2F;QAC3F,oFAAoF;QACpF,8DAA8D;QAC9D,IAAM,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;QAC7B,IAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;QACjC,IAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;QAEjC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC1B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAE1B,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACzB,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEzB,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAE3B,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAE/B,4CAA4C;QAC5C,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;QACpD,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IA3DH;QAAC,iBAAU,EAAE;;uBAAA;IA6Db,sBAAC;AAAD,CAAC,AA5DD,CAAqC,sCAAmB,GA4DvD;AA5DY,uBAAe,kBA4D3B,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HammerGestureConfig} from '@angular/platform-browser';\r\n\r\n/* Adjusts configuration of our gesture library, Hammer. */\r\n@Injectable()\r\nexport class MdGestureConfig extends HammerGestureConfig {\r\n\r\n  /* List of new event names to add to the gesture support list */\r\n  events: string[] = [\r\n    'drag',\r\n    'dragstart',\r\n    'dragend',\r\n    'dragright',\r\n    'dragleft',\r\n    'longpress',\r\n    'slide',\r\n    'slidestart',\r\n    'slideend',\r\n    'slideright',\r\n    'slideleft'\r\n  ];\r\n\r\n  /*\r\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\r\n   *\r\n   * Our gesture names come from the Material Design gestures spec:\r\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\r\n   *\r\n   * More information on default recognizers can be found in Hammer docs:\r\n   * http://hammerjs.github.io/recognizer-pan/\r\n   * http://hammerjs.github.io/recognizer-press/\r\n   *\r\n   * TODO: Confirm threshold numbers with Material Design UX Team\r\n   * */\r\n  buildHammer(element: HTMLElement) {\r\n    const mc = new Hammer(element);\r\n\r\n    // create custom gesture recognizers\r\n    const drag = new Hammer.Pan({event: 'drag', threshold: 6});\r\n    const longpress = new Hammer.Press({event: 'longpress', time: 500});\r\n    const slide = new Hammer.Pan({event: 'slide', threshold: 0});\r\n\r\n    // ensure custom recognizers can coexist with the default gestures (i.e. pan, press, swipe)\r\n    // custom recognizers can overwrite default recognizers if they aren't configured to\r\n    // \"recognizeWith\" others that listen to the same base events.\r\n    const pan = new Hammer.Pan();\r\n    const press = new Hammer.Press();\r\n    const swipe = new Hammer.Swipe();\r\n\r\n    drag.recognizeWith(pan);\r\n    drag.recognizeWith(swipe);\r\n    drag.recognizeWith(slide);\r\n\r\n    pan.recognizeWith(swipe);\r\n    pan.recognizeWith(slide);\r\n\r\n    slide.recognizeWith(swipe);\r\n\r\n    longpress.recognizeWith(press);\r\n\r\n    // add customized gestures to Hammer manager\r\n    mc.add([drag, pan, swipe, press, longpress, slide]);\r\n    return mc;\r\n  }\r\n\r\n}\r\n"]}