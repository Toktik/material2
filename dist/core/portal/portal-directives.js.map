{"version":3,"file":"portal-directives.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/core/portal/portal-directives.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    ComponentRef,\r\n    Directive,\r\n    TemplateRef,\r\n    ComponentResolver,\r\n    ViewContainerRef\r\n} from '@angular/core';\r\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\r\n\r\n\r\n\r\n/**\r\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\r\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\r\n *\r\n * Usage:\r\n * <template portal #greeting>\r\n *   <p> Hello {{name}} </p>\r\n * </template>\r\n */\r\n@Directive({\r\n  selector: '[portal]',\r\n  exportAs: 'portal',\r\n})\r\nexport class TemplatePortalDirective extends TemplatePortal {\r\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\r\n    super(templateRef, viewContainerRef);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\r\n * directly attached to it, enabling declarative use.\r\n *\r\n * Usage:\r\n * <template [portalHost]=\"greeting\"></template>\r\n */\r\n@Directive({\r\n  selector: '[portalHost]',\r\n  inputs: ['portal: portalHost']\r\n})\r\nexport class PortalHostDirective extends BasePortalHost {\r\n  /** The attached portal. */\r\n  private _portal: Portal<any>;\r\n\r\n  constructor(\r\n      private _componentResolver: ComponentResolver,\r\n      private _viewContainerRef: ViewContainerRef) {\r\n    super();\r\n  }\r\n\r\n  get portal(): Portal<any> {\r\n    return this._portal;\r\n  }\r\n\r\n  set portal(p: Portal<any>) {\r\n    this._replaceAttachedPortal(p);\r\n  }\r\n\r\n  /** Attach the given ComponentPortal to this PortlHost using the ComponentResolver. */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): Promise<ComponentRef<T>> {\r\n    portal.setAttachedHost(this);\r\n\r\n    // If the portal specifies an origin, use that as the logical location of the component\r\n    // in the application tree. Otherwise use the location of this PortalHost.\r\n    let viewContainerRef = portal.viewContainerRef != null ?\r\n        portal.viewContainerRef :\r\n        this._viewContainerRef;\r\n\r\n    return this._componentResolver.resolveComponent(portal.component).then(componentFactory => {\r\n      let ref = viewContainerRef.createComponent(\r\n          componentFactory, viewContainerRef.length,\r\n          portal.injector || viewContainerRef.parentInjector);\r\n\r\n      this.setDisposeFn(() => ref.destroy());\r\n      return ref;\r\n    });\r\n  }\r\n\r\n  /** Attach the given TemplatePortal to this PortlHost as an embedded View. */\r\n  attachTemplatePortal(portal: TemplatePortal): Promise<Map<string, any>> {\r\n    portal.setAttachedHost(this);\r\n\r\n    this._viewContainerRef.createEmbeddedView(portal.templateRef);\r\n    this.setDisposeFn(() => this._viewContainerRef.clear());\r\n\r\n    // TODO(jelbourn): return locals from view\r\n    return Promise.resolve(new Map<string, any>());\r\n  }\r\n\r\n  /** Detatches the currently attached Portal (if there is one) and attaches the given Portal. */\r\n  private _replaceAttachedPortal(p: Portal<any>): void {\r\n    let maybeDetach = this.hasAttached() ? this.detach() : Promise.resolve(null);\r\n\r\n    maybeDetach.then(() => {\r\n      if (p) {\r\n        this.attach(p);\r\n        this._portal = p;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport const PORTAL_DIRECTIVES = [TemplatePortalDirective, PortalHostDirective];\r\n"]}