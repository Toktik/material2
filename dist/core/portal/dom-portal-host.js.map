{"version":3,"file":"dom-portal-host.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/core/portal/dom-portal-host.ts"],"names":[],"mappings":";;;;;;AACA,uBAA8D,UAAU,CAAC,CAAA;AACzE,8BAA+D,iBAAiB,CAAC,CAAA;AAGjF;;;;;GAKG;AACH;IAAmC,iCAAc;IAC/C,uBACY,eAAwB,EACxB,kBAAqC;QAC/C,iBAAO,CAAC;QAFE,oBAAe,GAAf,eAAe,CAAS;QACxB,uBAAkB,GAAlB,kBAAkB,CAAmB;IAEjD,CAAC;IAED,mFAAmF;IACnF,6CAAqB,GAArB,UAAyB,MAA0B;QAAnD,iBAgBC;QAfC,EAAE,CAAC,CAAC,MAAM,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC;YACpC,MAAM,IAAI,gEAAgD,EAAE,CAAC;QAC/D,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAA,gBAAgB;YACrF,IAAI,GAAG,GAAG,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAC7C,gBAAgB,EAChB,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAC9B,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;YAE/D,IAAI,QAAQ,GAA0B,GAAG,CAAC,QAAQ,CAAC;YACnD,KAAI,CAAC,eAAe,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACxD,KAAI,CAAC,YAAY,CAAC,cAAM,OAAA,GAAG,CAAC,OAAO,EAAE,EAAb,CAAa,CAAC,CAAC;YACvC,MAAM,CAAC,GAAG,CAAC;QACb,CAAC,CAAC,CAAC;IACL,CAAC;IAED,4CAAoB,GAApB,UAAqB,MAAsB;QAA3C,iBAeC;QAdC,IAAI,aAAa,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAC5C,IAAI,OAAO,GAAG,aAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAEnE,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,WAAW,CAAC,QAAQ,CAAC,EAA1C,CAA0C,CAAC,CAAC;QAElF,IAAI,CAAC,YAAY,CAAC,CAAC;YACjB,IAAI,KAAK,GAAG,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC3C,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChB,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAC,CAAC;QAEJ,2CAA2C;QAC3C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,GAAG,EAAe,CAAC,CAAC;IACjD,CAAC;IAED,+BAAO,GAAP;QACE,gBAAK,CAAC,OAAO,WAAE,CAAC;QAChB,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IACH,oBAAC;AAAD,CAAC,AAjDD,CAAmC,uBAAc,GAiDhD;AAjDY,qBAAa,gBAiDzB,CAAA","sourcesContent":["import {ComponentResolver, ComponentRef, EmbeddedViewRef} from '@angular/core';\r\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\r\nimport {MdComponentPortalAttachedToDomWithoutOriginError} from './portal-errors';\r\n\r\n\r\n/**\r\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\r\n * application context.\r\n *\r\n * This is the only part of the portal core that directly touches the DOM.\r\n */\r\nexport class DomPortalHost extends BasePortalHost {\r\n  constructor(\r\n      private _hostDomElement: Element,\r\n      private _componentResolver: ComponentResolver) {\r\n    super();\r\n  }\r\n\r\n  /** Attach the given ComponentPortal to DOM element using the ComponentResolver. */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): Promise<ComponentRef<T>> {\r\n    if (portal.viewContainerRef == null) {\r\n      throw new MdComponentPortalAttachedToDomWithoutOriginError();\r\n    }\r\n\r\n    return this._componentResolver.resolveComponent(portal.component).then(componentFactory => {\r\n      let ref = portal.viewContainerRef.createComponent(\r\n          componentFactory,\r\n          portal.viewContainerRef.length,\r\n          portal.injector || portal.viewContainerRef.parentInjector);\r\n\r\n      let hostView = <EmbeddedViewRef<any>> ref.hostView;\r\n      this._hostDomElement.appendChild(hostView.rootNodes[0]);\r\n      this.setDisposeFn(() => ref.destroy());\r\n      return ref;\r\n    });\r\n  }\r\n\r\n  attachTemplatePortal(portal: TemplatePortal): Promise<Map<string, any>> {\r\n    let viewContainer = portal.viewContainerRef;\r\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef);\r\n\r\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\r\n\r\n    this.setDisposeFn((() => {\r\n      let index = viewContainer.indexOf(viewRef);\r\n      if (index != -1) {\r\n        viewContainer.remove(index);\r\n      }\r\n    }));\r\n\r\n    // TODO(jelbourn): Return locals from view.\r\n    return Promise.resolve(new Map<string, any>());\r\n  }\r\n\r\n  dispose(): void {\r\n    super.dispose();\r\n    if (this._hostDomElement.parentNode != null) {\r\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\r\n    }\r\n  }\r\n}\r\n"]}