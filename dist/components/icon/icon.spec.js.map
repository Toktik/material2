{"version":3,"file":"icon.spec.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/components/icon/icon.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {addProviders, inject, async} from '@angular/core/testing';\r\nimport {TestComponentBuilder} from '@angular/compiler/testing';\r\nimport {HTTP_PROVIDERS, XHRBackend} from '@angular/http';\r\nimport {MockBackend} from '@angular/http/testing';\r\nimport {Component} from '@angular/core';\r\nimport {MdIcon} from './icon';\r\nimport {MdIconRegistry} from './icon-registry';\r\nimport {getFakeSvgHttpResponse} from './fake-svgs';\r\n\r\n\r\n\r\n/** Returns the CSS classes assigned to an element as a sorted array. */\r\nconst sortedClassNames = (elem: Element) => elem.className.split(' ').sort();\r\n\r\n/**\r\n * Verifies that an element contains a single <svg> child element, and returns that child.\r\n */\r\nconst verifyAndGetSingleSvgChild = (element: SVGElement): any => {\r\n  expect(element.childNodes.length).toBe(1);\r\n  const svgChild = <Element>element.childNodes[0];\r\n  expect(svgChild.tagName.toLowerCase()).toBe('svg');\r\n  return svgChild;\r\n};\r\n\r\n/**\r\n * Verifies that an element contains a single <path> child element whose \"id\" attribute has\r\n * the specified value.\r\n */\r\nconst verifyPathChildElement = (element: Element, attributeValue: string) => {\r\n  expect(element.childNodes.length).toBe(1);\r\n  const pathElement = <Element>element.childNodes[0];\r\n  expect(pathElement.tagName.toLowerCase()).toBe('path');\r\n  expect(pathElement.getAttribute('id')).toBe(attributeValue);\r\n};\r\n\r\ndescribe('MdIcon', () => {\r\n\r\n  beforeEach(() => {\r\n    addProviders([\r\n      MdIconRegistry,\r\n      HTTP_PROVIDERS,\r\n      MockBackend,\r\n      {provide: XHRBackend, useExisting: MockBackend},\r\n    ]);\r\n  });\r\n\r\n\r\n  let builder: TestComponentBuilder;\r\n  let mdIconRegistry: MdIconRegistry;\r\n  let httpRequestUrls: string[];\r\n\r\n  beforeEach(\r\n      inject([TestComponentBuilder, MdIconRegistry, MockBackend],\r\n      (tcb: TestComponentBuilder, mir: MdIconRegistry, mockBackend: MockBackend) => {\r\n    builder = tcb;\r\n    mdIconRegistry = mir;\r\n    // Keep track of requests so we can verify caching behavior.\r\n    // Return responses for the SVGs defined in fake-svgs.ts.\r\n    httpRequestUrls = [];\r\n    mockBackend.connections.subscribe((connection: any) => {\r\n      const url = connection.request.url;\r\n      httpRequestUrls.push(url);\r\n      connection.mockRespond(getFakeSvgHttpResponse(url));\r\n    });\r\n  }));\r\n\r\n  describe('Ligature icons', () => {\r\n    it('should add material-icons class by default', async(() => {\r\n      builder.createAsync(MdIconLigatureTestApp).then(fixture => {\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        testComponent.iconName = 'home';\r\n        fixture.detectChanges();\r\n        expect(sortedClassNames(mdIconElement)).toEqual(['material-icons']);\r\n      });\r\n    }));\r\n\r\n    it('should use alternate icon font if set', async(() => {\r\n      mdIconRegistry.setDefaultFontSetClass('myfont');\r\n      builder.createAsync(MdIconLigatureTestApp).then(fixture => {\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        testComponent.iconName = 'home';\r\n        fixture.detectChanges();\r\n        expect(sortedClassNames(mdIconElement)).toEqual(['myfont']);\r\n      });\r\n    }));\r\n  });\r\n\r\n  describe('Icons from URLs', () => {\r\n    it('should fetch SVG icon from URL and inline the content', async(() => {\r\n      builder.createAsync(MdIconFromSvgUrlTestApp).then(fixture => {\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        let svgElement: any;\r\n\r\n        testComponent.iconUrl = 'cat.svg';\r\n        fixture.detectChanges();\r\n        // An <svg> element should have been added as a child of <md-icon>.\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        // Default attributes should be set.\r\n        expect(svgElement.getAttribute('height')).toBe('100%');\r\n        expect(svgElement.getAttribute('height')).toBe('100%');\r\n        // Make sure SVG content is taken from response.\r\n        verifyPathChildElement(svgElement, 'meow');\r\n\r\n        // Change the icon, and the SVG element should be replaced.\r\n        testComponent.iconUrl = 'dog.svg';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        verifyPathChildElement(svgElement, 'woof');\r\n\r\n        expect(httpRequestUrls).toEqual(['cat.svg', 'dog.svg']);\r\n        // Using an icon from a previously loaded URL should not cause another HTTP request.\r\n        testComponent.iconUrl = 'cat.svg';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        verifyPathChildElement(svgElement, 'meow');\r\n        expect(httpRequestUrls).toEqual(['cat.svg', 'dog.svg']);\r\n      });\r\n    }));\r\n\r\n    it('should register icon URLs by name', async(() => {\r\n      mdIconRegistry.addSvgIcon('fluffy', 'cat.svg');\r\n      mdIconRegistry.addSvgIcon('fido', 'dog.svg');\r\n      builder.createAsync(MdIconFromSvgNameTestApp).then(fixture => {\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        let svgElement: SVGElement;\r\n\r\n        testComponent.iconName = 'fido';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        verifyPathChildElement(svgElement, 'woof');\r\n        // The aria label should be taken from the icon name.\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('fido');\r\n\r\n        // Change the icon, and the SVG element should be replaced.\r\n        testComponent.iconName = 'fluffy';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        verifyPathChildElement(svgElement, 'meow');\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('fluffy');\r\n\r\n        expect(httpRequestUrls).toEqual(['dog.svg', 'cat.svg']);\r\n        // Using an icon from a previously loaded URL should not cause another HTTP request.\r\n        testComponent.iconName = 'fido';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        verifyPathChildElement(svgElement, 'woof');\r\n        expect(httpRequestUrls).toEqual(['dog.svg', 'cat.svg']);\r\n      });\r\n    }));\r\n\r\n    it('should extract icon from SVG icon set', async(() => {\r\n      mdIconRegistry.addSvgIconSetInNamespace('farm', 'farm-set-1.svg');\r\n      builder.createAsync(MdIconFromSvgNameTestApp).then(fixture => {\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        let svgElement: any;\r\n        let svgChild: any;\r\n\r\n        testComponent.iconName = 'farm:pig';\r\n        fixture.detectChanges();\r\n\r\n        expect(mdIconElement.childNodes.length).toBe(1);\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        expect(svgElement.childNodes.length).toBe(1);\r\n        svgChild = svgElement.childNodes[0];\r\n        // The first <svg> child should be the <g id=\"pig\"> element.\r\n        expect(svgChild.tagName.toLowerCase()).toBe('g');\r\n        expect(svgChild.getAttribute('id')).toBe('pig');\r\n        verifyPathChildElement(svgChild, 'oink');\r\n        // The aria label should be taken from the icon name (without the icon set portion).\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('pig');\r\n\r\n        // Change the icon, and the SVG element should be replaced.\r\n        testComponent.iconName = 'farm:cow';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        svgChild = svgElement.childNodes[0];\r\n        // The first <svg> child should be the <g id=\"cow\"> element.\r\n        expect(svgChild.tagName.toLowerCase()).toBe('g');\r\n        expect(svgChild.getAttribute('id')).toBe('cow');\r\n        verifyPathChildElement(svgChild, 'moo');\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('cow');\r\n      });\r\n    }));\r\n\r\n    it('should allow multiple icon sets in a namespace', async(() => {\r\n      mdIconRegistry.addSvgIconSetInNamespace('farm', 'farm-set-1.svg');\r\n      mdIconRegistry.addSvgIconSetInNamespace('farm', 'farm-set-2.svg');\r\n      mdIconRegistry.addSvgIconSetInNamespace('arrows', 'arrow-set.svg');\r\n      builder.createAsync(MdIconFromSvgNameTestApp).then(fixture => {\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        let svgElement: any;\r\n        let svgChild: any;\r\n\r\n        testComponent.iconName = 'farm:pig';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        expect(svgElement.childNodes.length).toBe(1);\r\n        svgChild = svgElement.childNodes[0];\r\n        // The <svg> child should be the <g id=\"pig\"> element.\r\n        expect(svgChild.tagName.toLowerCase()).toBe('g');\r\n        expect(svgChild.getAttribute('id')).toBe('pig');\r\n        expect(svgChild.childNodes.length).toBe(1);\r\n        verifyPathChildElement(svgChild, 'oink');\r\n        // The aria label should be taken from the icon name (without the namespace).\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('pig');\r\n\r\n        // Both icon sets registered in the 'farm' namespace should have been fetched.\r\n        expect(httpRequestUrls.sort()).toEqual(['farm-set-1.svg', 'farm-set-2.svg']);\r\n\r\n        // Change the icon name to one that appears in both icon sets. The icon from the set that\r\n        // was registered last should be used (with id attribute of 'moo moo' instead of 'moo'),\r\n        // and no additional HTTP request should be made.\r\n        testComponent.iconName = 'farm:cow';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        svgChild = svgElement.childNodes[0];\r\n        // The first <svg> child should be the <g id=\"cow\"> element.\r\n        expect(svgChild.tagName.toLowerCase()).toBe('g');\r\n        expect(svgChild.getAttribute('id')).toBe('cow');\r\n        expect(svgChild.childNodes.length).toBe(1);\r\n        verifyPathChildElement(svgChild, 'moo moo');\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('cow');\r\n        expect(httpRequestUrls.sort()).toEqual(['farm-set-1.svg', 'farm-set-2.svg']);\r\n      });\r\n    }));\r\n\r\n    it('should not wrap <svg> elements in icon sets in another svg tag', async(() => {\r\n      mdIconRegistry.addSvgIconSet('arrow-set.svg');\r\n      builder.createAsync(MdIconFromSvgNameTestApp).then(fixture => {\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        let svgElement: any;\r\n\r\n        testComponent.iconName = 'left-arrow';\r\n        fixture.detectChanges();\r\n        // arrow-set.svg stores its icons as nested <svg> elements, so they should be used\r\n        // directly and not wrapped in an outer <svg> tag like the <g> elements in other sets.\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        verifyPathChildElement(svgElement, 'left');\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('left-arrow');\r\n      });\r\n    }));\r\n\r\n    it('should return unmodified copies of icons from URLs', async(() => {\r\n      builder.createAsync(MdIconFromSvgUrlTestApp).then(fixture => {\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        let svgElement: any;\r\n\r\n        testComponent.iconUrl = 'cat.svg';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        verifyPathChildElement(svgElement, 'meow');\r\n        // Modify the SVG element by setting a viewBox attribute.\r\n        svgElement.setAttribute('viewBox', '0 0 100 100');\r\n\r\n        // Switch to a different icon.\r\n        testComponent.iconUrl = 'dog.svg';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        verifyPathChildElement(svgElement, 'woof');\r\n\r\n        // Switch back to the first icon. The viewBox attribute should not be present.\r\n        testComponent.iconUrl = 'cat.svg';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        verifyPathChildElement(svgElement, 'meow');\r\n        expect(svgElement.getAttribute('viewBox')).toBeFalsy();\r\n      });\r\n    }));\r\n\r\n    it('should return unmodified copies of icons from icon sets', async(() => {\r\n      mdIconRegistry.addSvgIconSet('arrow-set.svg');\r\n      builder.createAsync(MdIconFromSvgNameTestApp).then(fixture => {\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        let svgElement: any;\r\n\r\n        testComponent.iconName = 'left-arrow';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        verifyPathChildElement(svgElement, 'left');\r\n        // Modify the SVG element by setting a viewBox attribute.\r\n        svgElement.setAttribute('viewBox', '0 0 100 100');\r\n\r\n        // Switch to a different icon.\r\n        testComponent.iconName = 'right-arrow';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        verifyPathChildElement(svgElement, 'right');\r\n\r\n        // Switch back to the first icon. The viewBox attribute should not be present.\r\n        testComponent.iconName = 'left-arrow';\r\n        fixture.detectChanges();\r\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\r\n        verifyPathChildElement(svgElement, 'left');\r\n        expect(svgElement.getAttribute('viewBox')).toBeFalsy();\r\n      });\r\n    }));\r\n  });\r\n\r\n  describe('custom fonts', () => {\r\n    it('should apply CSS classes for custom font and icon', async(() => {\r\n      mdIconRegistry.registerFontClassAlias('f1', 'font1');\r\n      mdIconRegistry.registerFontClassAlias('f2');\r\n      builder.createAsync(MdIconCustomFontCssTestApp).then(fixture => {\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        testComponent.fontSet = 'f1';\r\n        testComponent.fontIcon = 'house';\r\n        fixture.detectChanges();\r\n        expect(sortedClassNames(mdIconElement)).toEqual(['font1', 'house']);\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('house');\r\n\r\n        testComponent.fontSet = 'f2';\r\n        testComponent.fontIcon = 'igloo';\r\n        fixture.detectChanges();\r\n        expect(sortedClassNames(mdIconElement)).toEqual(['f2', 'igloo']);\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('igloo');\r\n\r\n        testComponent.fontSet = 'f3';\r\n        testComponent.fontIcon = 'tent';\r\n        fixture.detectChanges();\r\n        expect(sortedClassNames(mdIconElement)).toEqual(['f3', 'tent']);\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('tent');\r\n      });\r\n    }));\r\n  });\r\n\r\n  describe('aria label', () => {\r\n    it('should set aria label from text content if not specified', async(() => {\r\n      builder.createAsync(MdIconLigatureTestApp).then(fixture => {\r\n\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        testComponent.iconName = 'home';\r\n\r\n        fixture.detectChanges();\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('home');\r\n\r\n        testComponent.iconName = 'hand';\r\n        fixture.detectChanges();\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('hand');\r\n      });\r\n    }));\r\n\r\n    it('should use alt tag if aria label is not specified', async(() => {\r\n      builder.createAsync(MdIconLigatureWithAriaBindingTestApp).then(fixture => {\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        testComponent.iconName = 'home';\r\n        testComponent.altText = 'castle';\r\n        fixture.detectChanges();\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('castle');\r\n\r\n        testComponent.ariaLabel = 'house';\r\n        fixture.detectChanges();\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('house');\r\n      });\r\n    }));\r\n\r\n    it('should use provided aria label rather than icon name', async(() => {\r\n      builder.createAsync(MdIconLigatureWithAriaBindingTestApp).then(fixture => {\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        testComponent.iconName = 'home';\r\n        testComponent.ariaLabel = 'house';\r\n        fixture.detectChanges();\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('house');\r\n      });\r\n    }));\r\n\r\n    it('should use provided aria label rather than font icon', async(() => {\r\n      builder.createAsync(MdIconCustomFontCssTestApp).then(fixture => {\r\n        const testComponent = fixture.debugElement.componentInstance;\r\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\r\n        testComponent.fontSet = 'f1';\r\n        testComponent.fontIcon = 'house';\r\n        testComponent.ariaLabel = 'home';\r\n        fixture.detectChanges();\r\n        expect(mdIconElement.getAttribute('aria-label')).toBe('home');\r\n      });\r\n    }));\r\n  });\r\n});\r\n\r\n/** Test components that contain an MdIcon. */\r\n@Component({\r\n  selector: 'test-app',\r\n  template: `<md-icon>{{iconName}}</md-icon>`,\r\n  directives: [MdIcon],\r\n})\r\nclass MdIconLigatureTestApp {\r\n  ariaLabel: string = null;\r\n  iconName = '';\r\n}\r\n\r\n@Component({\r\n  selector: 'test-app',\r\n  template: `<md-icon [aria-label]=\"ariaLabel\" [alt]=\"altText\">{{iconName}}</md-icon>`,\r\n  directives: [MdIcon],\r\n})\r\nclass MdIconLigatureWithAriaBindingTestApp {\r\n  ariaLabel: string = null;\r\n  iconName = '';\r\n}\r\n\r\n@Component({\r\n  selector: 'test-app',\r\n  template: `\r\n      <md-icon [fontSet]=\"fontSet\" [fontIcon]=\"fontIcon\" [aria-label]=\"ariaLabel\"></md-icon>\r\n  `,\r\n  directives: [MdIcon],\r\n})\r\nclass MdIconCustomFontCssTestApp {\r\n  ariaLabel: string = null;\r\n  fontSet = '';\r\n  fontIcon = '';\r\n}\r\n\r\n@Component({\r\n  selector: 'test-app',\r\n  template: `<md-icon [svgSrc]=\"iconUrl\" [aria-label]=\"ariaLabel\"></md-icon>`,\r\n  directives: [MdIcon],\r\n})\r\nclass MdIconFromSvgUrlTestApp {\r\n  ariaLabel: string = null;\r\n  iconUrl = '';\r\n}\r\n\r\n@Component({\r\n  selector: 'test-app',\r\n  template: `<md-icon [svgIcon]=\"iconName\" [aria-label]=\"ariaLabel\"></md-icon>`,\r\n  directives: [MdIcon],\r\n})\r\nclass MdIconFromSvgNameTestApp {\r\n  ariaLabel: string = null;\r\n  iconName = '';\r\n}\r\n"]}