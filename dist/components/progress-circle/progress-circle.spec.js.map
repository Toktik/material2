{"version":3,"file":"progress-circle.spec.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/components/progress-circle/progress-circle.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {inject} from '@angular/core/testing';\r\nimport {TestComponentBuilder} from '@angular/compiler/testing';\r\nimport {Component, DebugElement} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {MdProgressCircle} from './progress-circle';\r\n\r\n\r\ndescribe('MdProgressCircular', () => {\r\n  let builder: TestComponentBuilder;\r\n\r\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\r\n    builder = tcb;\r\n  }));\r\n\r\n  it('should apply a mode of \"determinate\" if no mode is provided.', (done: () => void) => {\r\n    builder\r\n      .overrideTemplate(TestApp, '<md-progress-circle></md-progress-circle>')\r\n      .createAsync(TestApp)\r\n      .then((fixture) => {\r\n        fixture.detectChanges();\r\n        let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\r\n        expect(progressElement.componentInstance.mode).toBe('determinate');\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should not modify the mode if a valid mode is provided.', (done: () => void) => {\r\n    builder\r\n      .overrideTemplate(TestApp, '<md-progress-circle mode=\"indeterminate\"></md-progress-circle>')\r\n      .createAsync(TestApp)\r\n      .then((fixture) => {\r\n        fixture.detectChanges();\r\n        let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\r\n        expect(progressElement.componentInstance.mode).toBe('indeterminate');\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should define a default value of undefined for the value attribute', (done: () => void) => {\r\n    builder\r\n      .overrideTemplate(TestApp, '<md-progress-circle></md-progress-circle>')\r\n      .createAsync(TestApp)\r\n      .then((fixture) => {\r\n        fixture.detectChanges();\r\n        let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\r\n        expect(progressElement.componentInstance.value).toBeUndefined();\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should set the value to undefined when the mode is set to indeterminate',\r\n    (done: () => void) => {\r\n      builder\r\n        .overrideTemplate(TestApp, `<md-progress-circle value=\"50\"\r\n                                                        [mode]=\"mode\"></md-progress-circle>`)\r\n        .createAsync(TestApp)\r\n        .then((fixture) => {\r\n          let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\r\n          fixture.debugElement.componentInstance.mode = 'determinate';\r\n          fixture.detectChanges();\r\n          expect(progressElement.componentInstance.value).toBe(50);\r\n          fixture.debugElement.componentInstance.mode = 'indeterminate';\r\n          fixture.detectChanges();\r\n          expect(progressElement.componentInstance.value).toBe(undefined);\r\n          done();\r\n        });\r\n  });\r\n\r\n  it('should clamp the value of the progress between 0 and 100', (done: () => void) => {\r\n    builder\r\n      .overrideTemplate(TestApp, '<md-progress-circle></md-progress-circle>')\r\n      .createAsync(TestApp)\r\n      .then((fixture) => {\r\n        fixture.detectChanges();\r\n        let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\r\n        let progressComponent = progressElement.componentInstance;\r\n\r\n        progressComponent.value = 50;\r\n        expect(progressComponent.value).toBe(50);\r\n\r\n        progressComponent.value = 999;\r\n        expect(progressComponent.value).toBe(100);\r\n\r\n        progressComponent.value = -10;\r\n        expect(progressComponent.value).toBe(0);\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should clean up the indeterminate animation when the element is destroyed',\r\n    (done: () => void) => {\r\n      let template = `<md-progress-circle\r\n                        mode=\"indeterminate\"\r\n                        *ngIf=\"!isHidden\"></md-progress-circle>`;\r\n\r\n      builder\r\n        .overrideTemplate(TestApp, template)\r\n        .createAsync(TestApp)\r\n        .then((fixture) => {\r\n          fixture.detectChanges();\r\n          let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\r\n          expect(progressElement.componentInstance.interdeterminateInterval).toBeTruthy();\r\n\r\n          fixture.debugElement.componentInstance.isHidden = true;\r\n          fixture.detectChanges();\r\n          expect(progressElement.componentInstance.interdeterminateInterval).toBeFalsy();\r\n          done();\r\n        });\r\n    });\r\n});\r\n\r\n\r\n/** Gets a child DebugElement by tag name. */\r\nfunction getChildDebugElement(parent: DebugElement, selector: string): DebugElement {\r\n  return parent.query(By.css(selector));\r\n}\r\n\r\n\r\n/** Test component that contains an MdButton. */\r\n@Component({\r\n  directives: [MdProgressCircle],\r\n  template: '',\r\n})\r\nclass TestApp {\r\n}\r\n"]}