{"version":3,"file":"tooltip.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/components/tooltip/tooltip.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, ComponentRef, Directive, Input, ElementRef, ViewContainerRef,\r\n    ChangeDetectorRef} from '@angular/core';\r\nimport {Overlay} from '@angular2-material/core/overlay/overlay';\r\nimport {OverlayState} from '@angular2-material/core/overlay/overlay-state';\r\nimport {OverlayRef} from '@angular2-material/core/overlay/overlay-ref';\r\nimport {ComponentPortal} from '@angular2-material/core/portal/portal';\r\nimport {OverlayConnectionPosition, OriginConnectionPosition} from\r\n    '@angular2-material/core/overlay/position/connected-position';\r\n\r\nexport type TooltipPosition = 'before' | 'after' | 'above' | 'below';\r\n\r\n@Directive({\r\n  selector: '[md-tooltip]',\r\n  host: {\r\n    '(mouseenter)': '_handleMouseEnter($event)',\r\n    '(mouseleave)': '_handleMouseLeave($event)',\r\n  }\r\n})\r\nexport class MdTooltip {\r\n  visible: boolean = false;\r\n\r\n  /** Allows the user to define the position of the tooltip relative to the parent element */\r\n  private _position: TooltipPosition = 'below';\r\n  @Input('tooltip-position') get position(): TooltipPosition {\r\n    return this._position;\r\n  }\r\n  set position(value: TooltipPosition) {\r\n    if (value !== this._position) {\r\n      this._position = value;\r\n      this._createOverlay();\r\n      this._updatePosition();\r\n    }\r\n  }\r\n\r\n  /** The message to be displayed in the tooltip */\r\n  private _message: string;\r\n  @Input('md-tooltip') get message() {\r\n    return this._message;\r\n  }\r\n  set message(value: string) {\r\n    this._message = value;\r\n    this._updatePosition();\r\n  }\r\n\r\n  private _overlayRef: OverlayRef;\r\n\r\n  constructor(private _overlay: Overlay, private _elementRef: ElementRef,\r\n      private _viewContainerRef: ViewContainerRef,\r\n      private _changeDetectionRef: ChangeDetectorRef) {}\r\n\r\n  /** \r\n   * Create overlay on init\r\n   * TODO: @internal\r\n   */\r\n  ngOnInit() {\r\n    this._createOverlay();\r\n  }\r\n\r\n  /**\r\n   * Create the overlay config and position strategy\r\n   */\r\n  private _createOverlay() {\r\n    if (this._overlayRef) {\r\n      if (this.visible) {\r\n        // if visible, hide before destroying\r\n        this.hide().then(() => this._createOverlay());\r\n      } else {\r\n        // if not visible, dispose and recreate\r\n        this._overlayRef.dispose();\r\n        this._overlayRef = null;\r\n        this._createOverlay();\r\n      }\r\n    } else {\r\n      let origin = this._getOrigin();\r\n      let position = this._getOverlayPosition();\r\n      let strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\r\n      let config = new OverlayState();\r\n      config.positionStrategy = strategy;\r\n      this._overlay.create(config).then(ref => {\r\n        this._overlayRef = ref;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the origin position based on the user's position preference\r\n   */\r\n  private _getOrigin(): OriginConnectionPosition {\r\n    switch (this.position) {\r\n      case 'before': return { originX: 'start', originY: 'center' };\r\n      case 'after':  return { originX: 'end', originY: 'center' };\r\n      case 'above':  return { originX: 'center', originY: 'top' };\r\n      case 'below':  return { originX: 'center', originY: 'bottom' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the overlay position based on the user's preference\r\n   */\r\n  private _getOverlayPosition(): OverlayConnectionPosition {\r\n    switch (this.position) {\r\n      case 'before': return { overlayX: 'end', overlayY: 'center' };\r\n      case 'after':  return { overlayX: 'start', overlayY: 'center' };\r\n      case 'above':  return { overlayX: 'center', overlayY: 'bottom' };\r\n      case 'below':  return { overlayX: 'center', overlayY: 'top' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows the tooltip on mouse enter\r\n   * @param event\r\n   */\r\n  _handleMouseEnter(event: MouseEvent) {\r\n    this.show();\r\n  }\r\n\r\n  /**\r\n   * Hides the tooltip on mouse leave\r\n   * @param event\r\n   */\r\n  _handleMouseLeave(event: MouseEvent) {\r\n    this.hide();\r\n  }\r\n\r\n  /**\r\n   * Shows the tooltip and returns a promise that will resolve when the tooltip is visible\r\n   */\r\n  show(): Promise<any> {\r\n    if (!this.visible && this._overlayRef && !this._overlayRef.hasAttached()) {\r\n      this.visible = true;\r\n      let promise = this._overlayRef.attach(new ComponentPortal(TooltipComponent,\r\n          this._viewContainerRef));\r\n      promise.then((ref: ComponentRef<TooltipComponent>) => {\r\n        ref.instance.message = this.message;\r\n        this._updatePosition();\r\n      });\r\n      return promise;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hides the tooltip and returns a promise that will resolve when the tooltip is hidden\r\n   */\r\n  hide(): Promise<any> {\r\n    if (this.visible && this._overlayRef && this._overlayRef.hasAttached()) {\r\n      this.visible = false;\r\n      return this._overlayRef.detach();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows/hides the tooltip and returns a promise that will resolve when it is done\r\n   */\r\n  toggle(): Promise<any> {\r\n    if (this.visible) {\r\n      return this.hide();\r\n    } else {\r\n      return this.show();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the tooltip's position\r\n   */\r\n  private _updatePosition() {\r\n    if (this._overlayRef) {\r\n      this._changeDetectionRef.detectChanges();\r\n      this._overlayRef.updatePosition();\r\n    }\r\n  }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-tooltip-component',\r\n  template: `<div class=\"md-tooltip\">{{message}}</div>`,\r\n  styleUrls: ['tooltip.css'],\r\n})\r\nclass TooltipComponent {\r\n  message: string;\r\n}\r\n\r\nexport const MD_TOOLTIP_DIRECTIVES = [MdTooltip];\r\n"]}