{"version":3,"file":"menu-trigger.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/components/menu/menu-trigger.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    Directive,\r\n    ElementRef,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    HostListener,\r\n    ViewContainerRef,\r\n    AfterViewInit,\r\n    OnDestroy\r\n} from '@angular/core';\r\nimport {MdMenu} from './menu';\r\nimport {MdMenuItem, MdMenuAnchor} from './menu-item';\r\nimport {MdMenuMissingError} from './menu-errors';\r\nimport {\r\n    Overlay,\r\n    OverlayState,\r\n    OverlayRef,\r\n    OVERLAY_PROVIDERS,\r\n    TemplatePortal\r\n} from '@angular2-material/core/core';\r\nimport {\r\n    ConnectedPositionStrategy\r\n} from '@angular2-material/core/overlay/position/connected-position-strategy';\r\nimport {\r\n  HorizontalConnectionPos,\r\n  VerticalConnectionPos\r\n} from '@angular2-material/core/overlay/position/connected-position';\r\n\r\n/**\r\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\r\n * responsible for toggling the display of the provided menu instance.\r\n */\r\n@Directive({\r\n  selector: '[md-menu-trigger-for]',\r\n  host: {'aria-haspopup': 'true'},\r\n  providers: [OVERLAY_PROVIDERS],\r\n  exportAs: 'mdMenuTrigger'\r\n})\r\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\r\n  private _portal: TemplatePortal;\r\n  private _overlayRef: OverlayRef;\r\n  menuOpen: boolean = false;\r\n\r\n  @Input('md-menu-trigger-for') menu: MdMenu;\r\n  @Output() onMenuOpen = new EventEmitter();\r\n  @Output() onMenuClose = new EventEmitter();\r\n\r\n  constructor(private _overlay: Overlay, private _element: ElementRef,\r\n              private _viewContainerRef: ViewContainerRef) {}\r\n\r\n  ngAfterViewInit() {\r\n    this._checkMenu();\r\n    this.menu.close.subscribe(() => this.closeMenu());\r\n  }\r\n\r\n  ngOnDestroy() { this.destroyMenu(); }\r\n\r\n  @HostListener('click')\r\n  toggleMenu(): Promise<void> {\r\n    return this.menuOpen ? this.closeMenu() : this.openMenu();\r\n  }\r\n\r\n  openMenu(): Promise<void> {\r\n    return this._createOverlay()\r\n      .then(() => this._overlayRef.attach(this._portal))\r\n      .then(() => this._setIsMenuOpen(true));\r\n  }\r\n\r\n  closeMenu(): Promise<void> {\r\n    if (!this._overlayRef) { return Promise.resolve(); }\r\n\r\n    return this._overlayRef.detach()\r\n        .then(() => this._setIsMenuOpen(false));\r\n  }\r\n\r\n  destroyMenu(): void {\r\n    if (this._overlayRef) { this._overlayRef.dispose(); }\r\n  }\r\n\r\n  // set state rather than toggle to support triggers sharing a menu\r\n  private _setIsMenuOpen(isOpen: boolean): void {\r\n    this.menuOpen = isOpen;\r\n    this.menu._setClickCatcher(isOpen);\r\n    this.menuOpen ? this.onMenuOpen.emit(null) : this.onMenuClose.emit(null);\r\n  }\r\n\r\n  /**\r\n   *  This method checks that a valid instance of MdMenu has been passed into\r\n   *  md-menu-trigger-for.  If not, an exception is thrown.\r\n   */\r\n  private _checkMenu() {\r\n    if (!this.menu || !(this.menu instanceof MdMenu)) {\r\n      throw new MdMenuMissingError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  This method creates the overlay from the provided menu's template and saves its\r\n   *  OverlayRef so that it can be attached to the DOM when openMenu is called.\r\n   */\r\n  private _createOverlay(): Promise<any> {\r\n    if (this._overlayRef) { return Promise.resolve(); }\r\n\r\n    this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\r\n    return this._overlay.create(this._getOverlayConfig())\r\n        .then(overlay => this._overlayRef = overlay);\r\n  }\r\n\r\n  /**\r\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\r\n   * @returns OverlayState\r\n   */\r\n  private _getOverlayConfig(): OverlayState {\r\n    const overlayState = new OverlayState();\r\n    overlayState.positionStrategy = this._getPosition();\r\n    return overlayState;\r\n  }\r\n\r\n  /**\r\n   * This method builds the position strategy for the overlay, so the menu is properly connected\r\n   * to the trigger.\r\n   * @returns ConnectedPositionStrategy\r\n   */\r\n  private _getPosition(): ConnectedPositionStrategy  {\r\n    const positionX: HorizontalConnectionPos = this.menu.positionX === 'before' ? 'end' : 'start';\r\n    const positionY: VerticalConnectionPos = this.menu.positionY === 'above' ? 'bottom' : 'top';\r\n\r\n    return this._overlay.position().connectedTo(\r\n      this._element,\r\n      {originX: positionX, originY: positionY},\r\n      {overlayX: positionX, overlayY: positionY}\r\n    );\r\n  }\r\n}\r\n\r\nexport const MD_MENU_DIRECTIVES = [MdMenu, MdMenuItem, MdMenuTrigger, MdMenuAnchor];\r\n"]}