{"version":3,"file":"list.spec.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/components/list/list.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {inject, async} from '@angular/core/testing';\r\nimport {TestComponentBuilder} from '@angular/compiler/testing';\r\nimport {Component} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\n\r\nimport {MD_LIST_DIRECTIVES, MdListItem} from './list';\r\n\r\ndescribe('MdList', () => {\r\n  let builder: TestComponentBuilder;\r\n\r\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\r\n    builder = tcb;\r\n  }));\r\n\r\n  it('should add and remove focus class on focus/blur', async(() => {\r\n    var template = `\r\n        <md-list>\r\n          <a md-list-item>\r\n            Paprika\r\n          </a>\r\n        </md-list>`;\r\n\r\n    builder.overrideTemplate(TestList, template).createAsync(TestList).then(fixture => {\r\n      let listItem = fixture.debugElement.query(By.directive(MdListItem));\r\n      let listItemDiv = fixture.debugElement.query(By.css('.md-list-item'));\r\n      fixture.detectChanges();\r\n      expect(listItemDiv.nativeElement.classList).not.toContain('md-list-item-focus');\r\n\r\n      listItem.componentInstance._handleFocus();\r\n      fixture.detectChanges();\r\n      expect(listItemDiv.nativeElement.classList).toContain('md-list-item-focus');\r\n\r\n      listItem.componentInstance._handleBlur();\r\n      fixture.detectChanges();\r\n      expect(listItemDiv.nativeElement.classList).not.toContain('md-list-item-focus');\r\n    });\r\n  }));\r\n\r\n  it('should not apply any class to a list without lines', async(() => {\r\n    var template = `\r\n        <md-list>\r\n          <md-list-item>\r\n            Paprika\r\n          </md-list-item>\r\n        </md-list>`;\r\n\r\n    builder.overrideTemplate(TestList, template).createAsync(TestList).then(fixture => {\r\n      let listItem = fixture.debugElement.query(By.css('md-list-item'));\r\n      fixture.detectChanges();\r\n      expect(listItem.nativeElement.className).toBe('');\r\n    });\r\n  }));\r\n\r\n  it('should apply md-2-line class to lists with two lines', async(() => {\r\n    var template = `\r\n        <md-list>\r\n          <md-list-item *ngFor=\"let item of items\">\r\n            <img src=\"\">\r\n            <h3 md-line>{{item.name}}</h3>\r\n            <p md-line>{{item.description}}</p>\r\n          </md-list-item>\r\n        </md-list>`;\r\n\r\n    return builder.overrideTemplate(TestList, template).createAsync(TestList).then(fixture => {\r\n      fixture.detectChanges();\r\n      let listItems = fixture.debugElement.children[0].queryAll(By.css('md-list-item'));\r\n      expect(listItems[0].nativeElement.className).toBe('md-2-line');\r\n      expect(listItems[1].nativeElement.className).toBe('md-2-line');\r\n    });\r\n  }));\r\n\r\n  it('should apply md-3-line class to lists with three lines', async(() => {\r\n    var template = `\r\n        <md-list>\r\n          <md-list-item *ngFor=\"let item of items\">\r\n            <h3 md-line>{{item.name}}</h3>\r\n            <p md-line>{{item.description}}</p>\r\n            <p md-line>Some other text</p>\r\n          </md-list-item>\r\n        </md-list>`;\r\n\r\n    return builder.overrideTemplate(TestList, template).createAsync(TestList).then(fixture => {\r\n        fixture.detectChanges();\r\n        let listItems = fixture.debugElement.children[0].queryAll(By.css('md-list-item'));\r\n        expect(listItems[0].nativeElement.className).toBe('md-3-line');\r\n        expect(listItems[1].nativeElement.className).toBe('md-3-line');\r\n      });\r\n  }));\r\n\r\n  it('should apply md-list-avatar class to list items with avatars', async(() => {\r\n    var template = `\r\n        <md-list>\r\n          <md-list-item>\r\n            <img src=\"\" md-list-avatar>\r\n            Paprika\r\n          </md-list-item>\r\n         <md-list-item>\r\n            Pepper\r\n          </md-list-item>\r\n        </md-list>`;\r\n\r\n    return builder.overrideTemplate(TestList, template).createAsync(TestList).then(fixture => {\r\n      fixture.detectChanges();\r\n      let listItems = fixture.debugElement.children[0].queryAll(By.css('md-list-item'));\r\n      expect(listItems[0].nativeElement.className).toBe('md-list-avatar');\r\n      expect(listItems[1].nativeElement.className).toBe('');\r\n    });\r\n  }));\r\n\r\n  it('should not clear custom classes provided by user', async(() => {\r\n    var template = `\r\n        <md-list>\r\n          <md-list-item class=\"test-class\" *ngFor=\"let item of items\">\r\n            <h3 md-line>{{item.name}}</h3>\r\n            <p md-line>{{item.description}}</p>\r\n          </md-list-item>\r\n        </md-list>`;\r\n\r\n    return builder.overrideTemplate(TestList, template).createAsync(TestList).then(fixture => {\r\n      fixture.detectChanges();\r\n      let listItems = fixture.debugElement.children[0].queryAll(By.css('md-list-item'));\r\n      expect(listItems[0].nativeElement.classList.contains('test-class')).toBe(true);\r\n    });\r\n  }));\r\n\r\n  it('should update classes if number of lines change', async(() => {\r\n    var template = `\r\n        <md-list>\r\n          <md-list-item *ngFor=\"let item of items\">\r\n            <h3 md-line>{{item.name}}</h3>\r\n            <p md-line>{{item.description}}</p>\r\n            <p md-line *ngIf=\"showThirdLine\">Some other text</p>\r\n          </md-list-item>\r\n        </md-list>`;\r\n\r\n    return builder.overrideTemplate(TestList, template).createAsync(TestList).then(fixture => {\r\n      fixture.debugElement.componentInstance.showThirdLine = false;\r\n      fixture.detectChanges();\r\n      let listItem = fixture.debugElement.children[0].query(By.css('md-list-item'));\r\n      expect(listItem.nativeElement.className).toBe('md-2-line');\r\n\r\n      fixture.debugElement.componentInstance.showThirdLine = true;\r\n      fixture.detectChanges();\r\n      fixture.whenStable().then(() => {\r\n        expect(listItem.nativeElement.className).toBe('md-3-line');\r\n      });\r\n    });\r\n  }));\r\n\r\n  it('should add aria roles properly', async(() => {\r\n    var template = `\r\n        <md-list>\r\n          <md-list-item *ngFor=\"let item of items\">\r\n            {{item.name}}\r\n          </md-list-item>\r\n        </md-list>`;\r\n\r\n    return builder.overrideTemplate(TestList, template).createAsync(TestList).then(fixture => {\r\n      fixture.detectChanges();\r\n      let list = fixture.debugElement.children[0];\r\n      let listItem = fixture.debugElement.children[0].query(By.css('md-list-item'));\r\n      expect(list.nativeElement.getAttribute('role')).toBe('list');\r\n      expect(listItem.nativeElement.getAttribute('role')).toBe('listitem');\r\n    });\r\n  }));\r\n\r\n});\r\n\r\n@Component({\r\n  selector: 'test-list',\r\n  template: ``,\r\n  directives: [MD_LIST_DIRECTIVES]\r\n})\r\nclass TestList {\r\n  items: any[] = [\r\n    {'name': 'Paprika', 'description': 'A seasoning'},\r\n    {'name': 'Pepper', 'description': 'Another seasoning'}\r\n  ];\r\n  showThirdLine: boolean = false;\r\n}\r\n"]}