{"version":3,"file":"dialog.spec.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/components/dialog/dialog.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  inject,\r\n  fakeAsync,\r\n  async,\r\n  addProviders,\r\n} from '@angular/core/testing';\r\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\r\nimport {\r\n  Component,\r\n  Directive,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {MdDialog} from './dialog';\r\nimport {OVERLAY_PROVIDERS} from '@angular2-material/core/overlay/overlay';\r\nimport {OverlayContainer} from '@angular2-material/core/overlay/overlay-container';\r\nimport {MdDialogConfig} from './dialog-config';\r\nimport {MdDialogRef} from './dialog-ref';\r\n\r\n\r\n\r\ndescribe('MdDialog', () => {\r\n  let builder: TestComponentBuilder;\r\n  let dialog: MdDialog;\r\n  let overlayContainerElement: HTMLElement;\r\n\r\n  let testViewContainerRef: ViewContainerRef;\r\n  let viewContainerFixture: ComponentFixture<ComponentWithChildViewContainer>;\r\n\r\n  beforeEach(() => {\r\n    addProviders([\r\n      OVERLAY_PROVIDERS,\r\n      MdDialog,\r\n      {provide: OverlayContainer, useFactory: () => {\r\n        return {\r\n          getContainerElement: () => {\r\n            overlayContainerElement = document.createElement('div');\r\n            return overlayContainerElement;\r\n          }\r\n        };\r\n      }},\r\n    ]);\r\n  });\r\n\r\n  let deps = [TestComponentBuilder, MdDialog];\r\n  beforeEach(inject(deps, fakeAsync((tcb: TestComponentBuilder, d: MdDialog) => {\r\n    builder = tcb;\r\n    dialog = d;\r\n  })));\r\n\r\n  beforeEach(async(() => {\r\n    builder.createAsync(ComponentWithChildViewContainer).then(fixture => {\r\n      viewContainerFixture = fixture;\r\n\r\n      viewContainerFixture.detectChanges();\r\n      testViewContainerRef = fixture.componentInstance.childViewContainer;\r\n    });\r\n  }));\r\n\r\n  it('should open a dialog with a component', async(() => {\r\n    let config = new MdDialogConfig();\r\n    config.viewContainerRef = testViewContainerRef;\r\n\r\n    dialog.open(PizzaMsg, config).then(dialogRef => {\r\n      expect(overlayContainerElement.textContent).toContain('Pizza');\r\n      expect(dialogRef.componentInstance).toEqual(jasmine.any(PizzaMsg));\r\n      expect(dialogRef.componentInstance.dialogRef).toBe(dialogRef);\r\n\r\n      viewContainerFixture.detectChanges();\r\n      let dialogContainerElement = overlayContainerElement.querySelector('md-dialog-container');\r\n      expect(dialogContainerElement.getAttribute('role')).toBe('dialog');\r\n    });\r\n\r\n    detectChangesForDialogOpen(viewContainerFixture);\r\n  }));\r\n\r\n  it('should apply the configured role to the dialog element', async(() => {\r\n    let config = new MdDialogConfig();\r\n    config.viewContainerRef = testViewContainerRef;\r\n    config.role = 'alertdialog';\r\n\r\n    dialog.open(PizzaMsg, config).then(dialogRef => {\r\n      viewContainerFixture.detectChanges();\r\n\r\n      let dialogContainerElement = overlayContainerElement.querySelector('md-dialog-container');\r\n      expect(dialogContainerElement.getAttribute('role')).toBe('alertdialog');\r\n    });\r\n\r\n    detectChangesForDialogOpen(viewContainerFixture);\r\n  }));\r\n\r\n  it('should close a dialog and get back a result', async(() => {\r\n    let config = new MdDialogConfig();\r\n    config.viewContainerRef = testViewContainerRef;\r\n\r\n    dialog.open(PizzaMsg, config).then(dialogRef => {\r\n      viewContainerFixture.detectChanges();\r\n\r\n      let afterCloseResult: string;\r\n      dialogRef.afterClosed().subscribe(result => {\r\n        afterCloseResult = result;\r\n      });\r\n\r\n      dialogRef.close('Charmander');\r\n\r\n      viewContainerFixture.whenStable().then(() => {\r\n        expect(afterCloseResult).toBe('Charmander');\r\n        expect(overlayContainerElement.childNodes.length).toBe(0);\r\n      });\r\n    });\r\n\r\n    detectChangesForDialogOpen(viewContainerFixture);\r\n  }));\r\n});\r\n\r\n\r\n/** Runs the necessary detectChanges for a dialog to complete its opening. */\r\nfunction detectChangesForDialogOpen(fixture: ComponentFixture<ComponentWithChildViewContainer>) {\r\n  // TODO(jelbourn): figure out why the test zone is \"stable\" when there are still pending\r\n  // tasks, such that we have to use `setTimeout` to run the second round of change detection.\r\n  // Two rounds of change detection are necessary: one to *create* the dialog container, and\r\n  // another to cause the lifecycle events of the container to run and load the dialog content.\r\n  fixture.detectChanges();\r\n  setTimeout(() => fixture.detectChanges(), 50);\r\n}\r\n\r\n@Directive({selector: 'dir-with-view-container'})\r\nclass DirectiveWithViewContainer {\r\n  constructor(public viewContainerRef: ViewContainerRef) { }\r\n}\r\n\r\n@Component({\r\n  selector: 'arbitrary-component',\r\n  template: `<dir-with-view-container></dir-with-view-container>`,\r\n  directives: [DirectiveWithViewContainer],\r\n})\r\nclass ComponentWithChildViewContainer {\r\n  @ViewChild(DirectiveWithViewContainer) childWithViewContainer: DirectiveWithViewContainer;\r\n\r\n  constructor(public changeDetectorRef: ChangeDetectorRef) { }\r\n\r\n  get childViewContainer() {\r\n    return this.childWithViewContainer.viewContainerRef;\r\n  }\r\n}\r\n\r\n/** Simple component for testing ComponentPortal. */\r\n@Component({\r\n  selector: 'pizza-msg',\r\n  template: '<p>Pizza</p>',\r\n})\r\nclass PizzaMsg {\r\n  constructor(public dialogRef: MdDialogRef<PizzaMsg>) { }\r\n}\r\n"]}