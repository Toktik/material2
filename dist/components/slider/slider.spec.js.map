{"version":3,"file":"slider.spec.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/components/slider/slider.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    addProviders,\r\n    inject,\r\n    async,\r\n} from '@angular/core/testing';\r\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\r\nimport {Component, DebugElement, ViewEncapsulation} from '@angular/core';\r\nimport {By} from '@angular/platform-browser';\r\nimport {MdSlider, MD_SLIDER_DIRECTIVES} from './slider';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {TestGestureConfig} from './test-gesture-config';\r\n\r\ndescribe('MdSlider', () => {\r\n  let builder: TestComponentBuilder;\r\n  let gestureConfig: TestGestureConfig;\r\n\r\n  beforeEach(() => {\r\n    addProviders([\r\n      {provide: HAMMER_GESTURE_CONFIG, useFactory: () => {\r\n        gestureConfig = new TestGestureConfig();\r\n        return gestureConfig;\r\n      }}\r\n    ]);\r\n  });\r\n\r\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\r\n    builder = tcb;\r\n  }));\r\n\r\n  describe('standard slider', () => {\r\n    let fixture: ComponentFixture<StandardSlider>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MdSlider;\r\n    let trackFillElement: HTMLElement;\r\n    let trackFillDimensions: ClientRect;\r\n    let sliderTrackElement: HTMLElement;\r\n    let sliderDimensions: ClientRect;\r\n    let thumbElement: HTMLElement;\r\n    let thumbDimensions: ClientRect;\r\n\r\n    beforeEach(async(() => {\r\n      builder.createAsync(StandardSlider).then(f => {\r\n        fixture = f;\r\n        fixture.detectChanges();\r\n\r\n        sliderDebugElement = fixture.debugElement.query(By.directive(MdSlider));\r\n        sliderNativeElement = sliderDebugElement.nativeElement;\r\n        sliderInstance = sliderDebugElement.componentInstance;\r\n\r\n        trackFillElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-track-fill');\r\n        trackFillDimensions = trackFillElement.getBoundingClientRect();\r\n        sliderTrackElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-track');\r\n        sliderDimensions = sliderTrackElement.getBoundingClientRect();\r\n\r\n        thumbElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-thumb-position');\r\n        thumbDimensions = thumbElement.getBoundingClientRect();\r\n      });\r\n    }));\r\n\r\n    it('should set the default values', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n      expect(sliderInstance.min).toBe(0);\r\n      expect(sliderInstance.max).toBe(100);\r\n    });\r\n\r\n    it('should update the value on a click', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n      dispatchClickEvent(sliderTrackElement, 0.19);\r\n      // The expected value is 19 from: percentage * difference of max and min.\r\n      expect(sliderInstance.value).toBe(19);\r\n    });\r\n\r\n    it('should update the value on a slide', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n      dispatchSlideEvent(sliderTrackElement, sliderNativeElement, 0, 0.89, gestureConfig);\r\n      // The expected value is 89 from: percentage * difference of max and min.\r\n      expect(sliderInstance.value).toBe(89);\r\n    });\r\n\r\n    it('should set the value as min when sliding before the track', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n      dispatchSlideEvent(sliderTrackElement, sliderNativeElement, 0, -1.33, gestureConfig);\r\n      expect(sliderInstance.value).toBe(0);\r\n    });\r\n\r\n    it('should set the value as max when sliding past the track', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n      dispatchSlideEvent(sliderTrackElement, sliderNativeElement, 0, 1.75, gestureConfig);\r\n      expect(sliderInstance.value).toBe(100);\r\n    });\r\n\r\n    it('should update the track fill on click', () => {\r\n      expect(trackFillDimensions.width).toBe(0);\r\n      dispatchClickEvent(sliderTrackElement, 0.39);\r\n\r\n      trackFillDimensions = trackFillElement.getBoundingClientRect();\r\n      thumbDimensions = thumbElement.getBoundingClientRect();\r\n\r\n      // The thumb and track fill positions are relative to the viewport, so to get the thumb's\r\n      // offset relative to the track, subtract the offset on the track fill.\r\n      let thumbPosition = thumbDimensions.left - trackFillDimensions.left;\r\n      // The track fill width should be equal to the thumb's position.\r\n      expect(Math.round(trackFillDimensions.width)).toBe(Math.round(thumbPosition));\r\n    });\r\n\r\n    it('should update the thumb position on click', () => {\r\n      expect(thumbDimensions.left).toBe(sliderDimensions.left);\r\n      // 50% is used here because the click event that is dispatched truncates the position and so\r\n      // a value had to be used that would not be truncated.\r\n      dispatchClickEvent(sliderTrackElement, 0.5);\r\n\r\n      thumbDimensions = thumbElement.getBoundingClientRect();\r\n      // The thumb position should be at 50% of the slider's width + the offset of the slider.\r\n      // Both the thumb and the slider are affected by this offset.\r\n      expect(thumbDimensions.left).toBe(sliderDimensions.width * 0.5 + sliderDimensions.left);\r\n    });\r\n\r\n    it('should update the track fill on slide', () => {\r\n      expect(trackFillDimensions.width).toBe(0);\r\n      dispatchSlideEvent(sliderTrackElement, sliderNativeElement, 0, 0.86, gestureConfig);\r\n\r\n      trackFillDimensions = trackFillElement.getBoundingClientRect();\r\n      thumbDimensions = thumbElement.getBoundingClientRect();\r\n\r\n      // The thumb and track fill positions are relative to the viewport, so to get the thumb's\r\n      // offset relative to the track, subtract the offset on the track fill.\r\n      let thumbPosition = thumbDimensions.left - trackFillDimensions.left;\r\n      // The track fill width should be equal to the thumb's position.\r\n      expect(Math.round(trackFillDimensions.width)).toBe(Math.round(thumbPosition));\r\n    });\r\n\r\n    it('should update the thumb position on slide', () => {\r\n      expect(thumbDimensions.left).toBe(sliderDimensions.left);\r\n      // The slide event also truncates the position passed in, so 50% is used here as well to\r\n      // ensure the ability to calculate the expected position.\r\n      dispatchSlideEvent(sliderTrackElement, sliderNativeElement, 0, 0.5, gestureConfig);\r\n\r\n      thumbDimensions = thumbElement.getBoundingClientRect();\r\n      expect(thumbDimensions.left).toBe(sliderDimensions.width * 0.5 + sliderDimensions.left);\r\n    });\r\n\r\n    it('should add the md-slider-active class on click', () => {\r\n      let containerElement = sliderNativeElement.querySelector('.md-slider-container');\r\n      expect(containerElement.classList).not.toContain('md-slider-active');\r\n\r\n      dispatchClickEvent(sliderNativeElement, 0.23);\r\n      fixture.detectChanges();\r\n\r\n      expect(containerElement.classList).toContain('md-slider-active');\r\n    });\r\n\r\n    it('should remove the md-slider-active class on blur', () => {\r\n      let containerElement = sliderNativeElement.querySelector('.md-slider-container');\r\n\r\n      dispatchClickEvent(sliderNativeElement, 0.95);\r\n      fixture.detectChanges();\r\n\r\n      expect(containerElement.classList).toContain('md-slider-active');\r\n\r\n      // Call the `onBlur` handler directly because we cannot simulate a focus event in unit tests.\r\n      sliderInstance.onBlur();\r\n      fixture.detectChanges();\r\n\r\n      expect(containerElement.classList).not.toContain('md-slider-active');\r\n    });\r\n\r\n    it('should add and remove the md-slider-sliding class when sliding', () => {\r\n      let containerElement = sliderNativeElement.querySelector('.md-slider-container');\r\n      expect(containerElement.classList).not.toContain('md-slider-sliding');\r\n\r\n      dispatchSlideStartEvent(sliderNativeElement, 0, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(containerElement.classList).toContain('md-slider-sliding');\r\n\r\n      dispatchSlideEndEvent(sliderNativeElement, 0.34, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(containerElement.classList).not.toContain('md-slider-sliding');\r\n    });\r\n  });\r\n\r\n  describe('disabled slider', () => {\r\n    let fixture: ComponentFixture<StandardSlider>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MdSlider;\r\n\r\n    beforeEach(async(() => {\r\n      builder.createAsync(DisabledSlider).then(f => {\r\n        fixture = f;\r\n        fixture.detectChanges();\r\n\r\n        sliderDebugElement = fixture.debugElement.query(By.directive(MdSlider));\r\n        sliderNativeElement = sliderDebugElement.nativeElement;\r\n        sliderInstance = sliderDebugElement.componentInstance;\r\n      });\r\n    }));\r\n\r\n    it('should be disabled', () => {\r\n      expect(sliderInstance.disabled).toBeTruthy();\r\n    });\r\n\r\n    it('should not change the value on click when disabled', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n      dispatchClickEvent(sliderNativeElement, 0.63);\r\n      expect(sliderInstance.value).toBe(0);\r\n    });\r\n\r\n    it('should not change the value on slide when disabled', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n      dispatchSlideEvent(sliderNativeElement, sliderNativeElement, 0, 0.5, gestureConfig);\r\n      expect(sliderInstance.value).toBe(0);\r\n    });\r\n\r\n    it('should not add the md-slider-active class on click when disabled', () => {\r\n      let containerElement = sliderNativeElement.querySelector('.md-slider-container');\r\n      expect(containerElement.classList).not.toContain('md-slider-active');\r\n\r\n      dispatchClickEvent(sliderNativeElement, 0.43);\r\n      fixture.detectChanges();\r\n\r\n      expect(containerElement.classList).not.toContain('md-slider-active');\r\n    });\r\n\r\n    it('should not add the md-slider-sliding class on slide when disabled', () => {\r\n      let containerElement = sliderNativeElement.querySelector('.md-slider-container');\r\n      expect(containerElement.classList).not.toContain('md-slider-sliding');\r\n\r\n      dispatchSlideStartEvent(sliderNativeElement, 0.46, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(containerElement.classList).not.toContain('md-slider-sliding');\r\n    });\r\n  });\r\n\r\n  describe('slider with set min and max', () => {\r\n    let fixture: ComponentFixture<SliderWithMinAndMax>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MdSlider;\r\n    let sliderTrackElement: HTMLElement;\r\n    let sliderDimensions: ClientRect;\r\n    let trackFillElement: HTMLElement;\r\n    let thumbElement: HTMLElement;\r\n\r\n    beforeEach(async(() => {\r\n      builder.createAsync(SliderWithMinAndMax).then(f => {\r\n        fixture = f;\r\n        fixture.detectChanges();\r\n\r\n        sliderDebugElement = fixture.debugElement.query(By.directive(MdSlider));\r\n        sliderNativeElement = sliderDebugElement.nativeElement;\r\n        sliderInstance = sliderDebugElement.injector.get(MdSlider);\r\n        sliderTrackElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-track');\r\n        sliderDimensions = sliderTrackElement.getBoundingClientRect();\r\n        trackFillElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-track-fill');\r\n        thumbElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-thumb-position');\r\n      });\r\n    }));\r\n\r\n    it('should set the default values from the attributes', () => {\r\n      expect(sliderInstance.value).toBe(4);\r\n      expect(sliderInstance.min).toBe(4);\r\n      expect(sliderInstance.max).toBe(6);\r\n    });\r\n\r\n    it('should set the correct value on click', () => {\r\n      dispatchClickEvent(sliderTrackElement, 0.09);\r\n      // Computed by multiplying the difference between the min and the max by the percentage from\r\n      // the click and adding that to the minimum.\r\n      let value = Math.round(4 + (0.09 * (6 - 4)));\r\n      expect(sliderInstance.value).toBe(value);\r\n    });\r\n\r\n    it('should set the correct value on slide', () => {\r\n      dispatchSlideEvent(sliderTrackElement, sliderNativeElement, 0, 0.62, gestureConfig);\r\n      // Computed by multiplying the difference between the min and the max by the percentage from\r\n      // the click and adding that to the minimum.\r\n      let value = Math.round(4 + (0.62 * (6 - 4)));\r\n      expect(sliderInstance.value).toBe(value);\r\n    });\r\n\r\n    it('should snap the thumb and fill to the nearest value on click', () => {\r\n      dispatchClickEvent(sliderTrackElement, 0.68);\r\n      fixture.detectChanges();\r\n\r\n      let trackFillDimensions = trackFillElement.getBoundingClientRect();\r\n      let thumbDimensions = thumbElement.getBoundingClientRect();\r\n      let thumbPosition = thumbDimensions.left - trackFillDimensions.left;\r\n\r\n      // The closest snap is halfway on the slider.\r\n      expect(thumbDimensions.left).toBe(sliderDimensions.width * 0.5 + sliderDimensions.left);\r\n      expect(Math.round(trackFillDimensions.width)).toBe(Math.round(thumbPosition));\r\n    });\r\n\r\n    it('should snap the thumb and fill to the nearest value on slide', () => {\r\n      dispatchSlideEvent(sliderTrackElement, sliderNativeElement, 0, 0.74, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      dispatchSlideEndEvent(sliderNativeElement, 0.74, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      let trackFillDimensions = trackFillElement.getBoundingClientRect();\r\n      let thumbDimensions = thumbElement.getBoundingClientRect();\r\n      let thumbPosition = thumbDimensions.left - trackFillDimensions.left;\r\n\r\n      // The closest snap is at the halfway point on the slider.\r\n      expect(thumbDimensions.left).toBe(sliderDimensions.left + sliderDimensions.width * 0.5);\r\n      expect(Math.round(trackFillDimensions.width)).toBe(Math.round(thumbPosition));\r\n\r\n    });\r\n  });\r\n\r\n  describe('slider with set value', () => {\r\n    let fixture: ComponentFixture<SliderWithValue>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MdSlider;\r\n    let sliderTrackElement: HTMLElement;\r\n\r\n    beforeEach(async(() => {\r\n      builder.createAsync(SliderWithValue).then(f => {\r\n        fixture = f;\r\n        fixture.detectChanges();\r\n\r\n        sliderDebugElement = fixture.debugElement.query(By.directive(MdSlider));\r\n        sliderNativeElement = sliderDebugElement.nativeElement;\r\n        sliderInstance = sliderDebugElement.injector.get(MdSlider);\r\n        sliderTrackElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-track');\r\n      });\r\n    }));\r\n\r\n    it('should set the default value from the attribute', () => {\r\n      expect(sliderInstance.value).toBe(26);\r\n    });\r\n\r\n    it('should set the correct value on click', () => {\r\n      dispatchClickEvent(sliderTrackElement, 0.92);\r\n      // On a slider with default max and min the value should be approximately equal to the\r\n      // percentage clicked. This should be the case regardless of what the original set value was.\r\n      expect(sliderInstance.value).toBe(92);\r\n    });\r\n\r\n    it('should set the correct value on slide', () => {\r\n      dispatchSlideEvent(sliderTrackElement, sliderNativeElement, 0, 0.32, gestureConfig);\r\n      expect(sliderInstance.value).toBe(32);\r\n    });\r\n  });\r\n\r\n  describe('slider with set step', () => {\r\n    let fixture: ComponentFixture<SliderWithStep>;\r\n    let sliderDebugElement: DebugElement;\r\n    let sliderNativeElement: HTMLElement;\r\n    let sliderInstance: MdSlider;\r\n    let sliderTrackElement: HTMLElement;\r\n    let sliderDimensions: ClientRect;\r\n    let trackFillElement: HTMLElement;\r\n    let thumbElement: HTMLElement;\r\n\r\n    beforeEach(async(() => {\r\n      builder.createAsync(SliderWithStep).then(f => {\r\n        fixture = f;\r\n        fixture.detectChanges();\r\n\r\n        sliderDebugElement = fixture.debugElement.query(By.directive(MdSlider));\r\n        sliderNativeElement = sliderDebugElement.nativeElement;\r\n        sliderInstance = sliderDebugElement.injector.get(MdSlider);\r\n        sliderTrackElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-track');\r\n        sliderDimensions = sliderTrackElement.getBoundingClientRect();\r\n        trackFillElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-track-fill');\r\n        thumbElement = <HTMLElement>sliderNativeElement.querySelector('.md-slider-thumb-position');\r\n      });\r\n    }));\r\n\r\n    it('should set the correct step value on click', () => {\r\n      expect(sliderInstance.value).toBe(0);\r\n\r\n      dispatchClickEvent(sliderTrackElement, 0.13);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(25);\r\n    });\r\n\r\n    it('should snap the thumb and fill to a step on click', () => {\r\n      dispatchClickEvent(sliderNativeElement, 0.66);\r\n      fixture.detectChanges();\r\n\r\n      let trackFillDimensions = trackFillElement.getBoundingClientRect();\r\n      let thumbDimensions = thumbElement.getBoundingClientRect();\r\n      let thumbPosition = thumbDimensions.left - trackFillDimensions.left;\r\n\r\n      // The closest step is at 75% of the slider.\r\n      expect(thumbDimensions.left).toBe(sliderDimensions.width * 0.75 + sliderDimensions.left);\r\n      expect(Math.round(trackFillDimensions.width)).toBe(Math.round(thumbPosition));\r\n    });\r\n\r\n    it('should set the correct step value on slide', () => {\r\n      dispatchSlideEvent(sliderTrackElement, sliderNativeElement, 0, 0.07, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      expect(sliderInstance.value).toBe(0);\r\n    });\r\n\r\n    it('should snap the thumb and fill to a step on slide', () => {\r\n      dispatchSlideEvent(sliderTrackElement, sliderNativeElement, 0, 0.88, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      dispatchSlideEndEvent(sliderNativeElement, 0.88, gestureConfig);\r\n      fixture.detectChanges();\r\n\r\n      let trackFillDimensions = trackFillElement.getBoundingClientRect();\r\n      let thumbDimensions = thumbElement.getBoundingClientRect();\r\n      let thumbPosition = thumbDimensions.left - trackFillDimensions.left;\r\n\r\n      // The closest snap is at the end of the slider.\r\n      expect(thumbDimensions.left).toBe(sliderDimensions.width + sliderDimensions.left);\r\n      expect(Math.round(trackFillDimensions.width)).toBe(Math.round(thumbPosition));\r\n    });\r\n  });\r\n});\r\n\r\n// The transition has to be removed in order to test the updated positions without setTimeout.\r\n@Component({\r\n  directives: [MD_SLIDER_DIRECTIVES],\r\n  template: `<md-slider></md-slider>`,\r\n  styles: [`\r\n    .md-slider-track-fill, .md-slider-thumb-position {\r\n        transition: none !important;\r\n    }\r\n  `],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nclass StandardSlider { }\r\n\r\n@Component({\r\n  directives: [MD_SLIDER_DIRECTIVES],\r\n  template: `<md-slider disabled></md-slider>`\r\n})\r\nclass DisabledSlider { }\r\n\r\n@Component({\r\n  directives: [MD_SLIDER_DIRECTIVES],\r\n  template: `<md-slider min=\"4\" max=\"6\"></md-slider>`,\r\n  styles: [`\r\n    .md-slider-track-fill, .md-slider-thumb-position {\r\n        transition: none !important;\r\n    }\r\n  `],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nclass SliderWithMinAndMax { }\r\n\r\n@Component({\r\n  directives: [MD_SLIDER_DIRECTIVES],\r\n  template: `<md-slider value=\"26\"></md-slider>`\r\n})\r\nclass SliderWithValue { }\r\n\r\n@Component({\r\n  directives: [MD_SLIDER_DIRECTIVES],\r\n  template: `<md-slider step=\"25\"></md-slider>`,\r\n  styles: [`\r\n    .md-slider-track-fill, .md-slider-thumb-position {\r\n        transition: none !important;\r\n    }\r\n  `],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nclass SliderWithStep { }\r\n\r\n/**\r\n * Dispatches a click event from an element.\r\n * Note: The mouse event truncates the position for the click.\r\n * @param element The element from which the event will be dispatched.\r\n * @param percentage The percentage of the slider where the click should occur. Used to find the\r\n * physical location of the click.\r\n */\r\nfunction dispatchClickEvent(element: HTMLElement, percentage: number): void {\r\n  let dimensions = element.getBoundingClientRect();\r\n  let y = dimensions.top;\r\n  let x = dimensions.left + (dimensions.width * percentage);\r\n\r\n  let event = document.createEvent('MouseEvent');\r\n  event.initMouseEvent(\r\n      'click', true, true, window, 0, x, y, x, y, false, false, false, false, 0, null);\r\n  element.dispatchEvent(event);\r\n}\r\n\r\n/**\r\n * Dispatches a slide event from an element.\r\n * @param trackElement The track element from which the event location will be calculated.\r\n * @param containerElement The container element from which the event will be dispatched.\r\n * @param startPercent The percentage of the slider where the slide will begin.\r\n * @param endPercent The percentage of the slider where the slide will end.\r\n * @param gestureConfig The gesture config for the test to handle emitting the slide events.\r\n */\r\nfunction dispatchSlideEvent(trackElement: HTMLElement, containerElement: HTMLElement,\r\n                            startPercent: number, endPercent: number,\r\n                            gestureConfig: TestGestureConfig): void {\r\n  let dimensions = trackElement.getBoundingClientRect();\r\n  let startX = dimensions.left + (dimensions.width * startPercent);\r\n  let endX = dimensions.left + (dimensions.width * endPercent);\r\n\r\n  gestureConfig.emitEventForElement('slidestart', containerElement, {\r\n    // The actual event has a center with an x value that the slide listener is looking for.\r\n    center: { x: startX },\r\n    // The event needs a source event with a prevent default so we fake one.\r\n    srcEvent: { preventDefault: jasmine.createSpy('preventDefault') }\r\n  });\r\n\r\n  gestureConfig.emitEventForElement('slide', containerElement, {\r\n    center: { x: endX },\r\n    srcEvent: { preventDefault: jasmine.createSpy('preventDefault') }\r\n  });\r\n}\r\n\r\n/**\r\n * Dispatches a slidestart event from an element.\r\n * @param element The element from which the event will be dispatched.\r\n * @param startPercent The percentage of the slider where the slide will begin.\r\n * @param gestureConfig The gesture config for the test to handle emitting the slide events.\r\n */\r\nfunction dispatchSlideStartEvent(element: HTMLElement, startPercent: number,\r\n                                 gestureConfig: TestGestureConfig): void {\r\n  let dimensions = element.getBoundingClientRect();\r\n  let x = dimensions.left + (dimensions.width * startPercent);\r\n\r\n  gestureConfig.emitEventForElement('slidestart', element, {\r\n    center: { x: x },\r\n    srcEvent: { preventDefault: jasmine.createSpy('preventDefault') }\r\n  });\r\n}\r\n\r\n/**\r\n * Dispatches a slideend event from an element.\r\n * @param element The element from which the event will be dispatched.\r\n * @param endPercent The percentage of the slider where the slide will end.\r\n * @param gestureConfig The gesture config for the test to handle emitting the slide events.\r\n */\r\nfunction dispatchSlideEndEvent(element: HTMLElement, endPercent: number,\r\n                               gestureConfig: TestGestureConfig): void {\r\n  let dimensions = element.getBoundingClientRect();\r\n  let x = dimensions.left + (dimensions.width * endPercent);\r\n\r\n  gestureConfig.emitEventForElement('slideend', element, {\r\n    center: { x: x },\r\n    srcEvent: { preventDefault: jasmine.createSpy('preventDefault') }\r\n  });\r\n}\r\n"]}