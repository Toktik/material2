{"version":3,"file":"input.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/components/input/input.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  forwardRef,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  Directive,\r\n  AfterContentInit,\r\n  ContentChild,\r\n  SimpleChange,\r\n  ContentChildren,\r\n  ViewChild,\r\n  ElementRef,\r\n  QueryList,\r\n  OnChanges,\r\n  EventEmitter,\r\n  Output,\r\n} from '@angular/core';\r\nimport {\r\n  NG_VALUE_ACCESSOR,\r\n  ControlValueAccessor,\r\n  DefaultValueAccessor,\r\n  NgModel,\r\n} from '@angular/forms';\r\nimport {NgIf} from '@angular/common';\r\nimport {BooleanFieldValue} from '@angular2-material/core/annotations/field-value';\r\nimport {MdError} from '@angular2-material/core/errors/error';\r\nimport {Observable} from 'rxjs/Observable';\r\n\r\n\r\nconst noop = () => {};\r\n\r\nexport const MD_INPUT_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdInput),\r\n  multi: true\r\n};\r\n\r\n// Invalid input type. Using one of these will throw an MdInputUnsupportedTypeError.\r\nconst MD_INPUT_INVALID_INPUT_TYPE = [\r\n  'file',\r\n  'radio',\r\n  'checkbox',\r\n];\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\nexport class MdInputPlaceholderConflictError extends MdError {\r\n  constructor() {\r\n    super('Placeholder attribute and child element were both specified.');\r\n  }\r\n}\r\n\r\nexport class MdInputUnsupportedTypeError extends MdError {\r\n  constructor(type: string) {\r\n    super(`Input type \"${type}\" isn't supported by md-input.`);\r\n  }\r\n}\r\n\r\nexport class MdInputDuplicatedHintError extends MdError {\r\n  constructor(align: string) {\r\n    super(`A hint was already declared for 'align=\"${align}\"'.`);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * The placeholder directive. The content can declare this to implement more\r\n * complex placeholders.\r\n */\r\n@Directive({\r\n  selector: 'md-placeholder'\r\n})\r\nexport class MdPlaceholder {}\r\n\r\n\r\n/** The hint directive, used to tag content as hint labels (going under the input). */\r\n@Directive({\r\n  selector: 'md-hint',\r\n  host: {\r\n    '[class.md-right]': 'align == \"end\"',\r\n    '[class.md-hint]': 'true'\r\n  }\r\n})\r\nexport class MdHint {\r\n  // Whether to align the hint label at the start or end of the line.\r\n  @Input() align: 'start' | 'end' = 'start';\r\n}\r\n\r\n\r\n/**\r\n * Component that represents a text input. It encapsulates the <input> HTMLElement and\r\n * improve on its behaviour, along with styling it according to the Material Design.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-input',\r\n  templateUrl: 'input.html',\r\n  styleUrls: ['input.css'],\r\n  providers: [MD_INPUT_CONTROL_VALUE_ACCESSOR],\r\n  directives: [DefaultValueAccessor, NgIf, NgModel],\r\n  host: {'(click)' : 'focus()'}\r\n})\r\nexport class MdInput implements ControlValueAccessor, AfterContentInit, OnChanges {\r\n  private _focused: boolean = false;\r\n  private _value: any = '';\r\n\r\n  /** Callback registered via registerOnTouched (ControlValueAccessor) */\r\n  private _onTouchedCallback: () => void = noop;\r\n  /** Callback registered via registerOnChange (ControlValueAccessor) */\r\n  private _onChangeCallback: (_: any) => void = noop;\r\n\r\n  /**\r\n   * Aria related inputs.\r\n   */\r\n  @Input('aria-label') ariaLabel: string;\r\n  @Input('aria-labelledby') ariaLabelledBy: string;\r\n  @Input('aria-disabled') @BooleanFieldValue() ariaDisabled: boolean;\r\n  @Input('aria-required') @BooleanFieldValue() ariaRequired: boolean;\r\n  @Input('aria-invalid') @BooleanFieldValue() ariaInvalid: boolean;\r\n\r\n  /**\r\n   * Content directives.\r\n   */\r\n  @ContentChild(MdPlaceholder) _placeholderChild: MdPlaceholder;\r\n  @ContentChildren(MdHint) _hintChildren: QueryList<MdHint>;\r\n\r\n  /** Readonly properties. */\r\n  get focused() { return this._focused; }\r\n  get empty() { return this._value == null || this._value === ''; }\r\n  get characterCount(): number {\r\n    return this.empty ? 0 : ('' + this._value).length;\r\n  }\r\n  get inputId(): string { return `${this.id}-input`; }\r\n\r\n  /**\r\n   * Bindings.\r\n   */\r\n  @Input() align: 'start' | 'end' = 'start';\r\n  @Input() dividerColor: 'primary' | 'accent' | 'warn' = 'primary';\r\n  @Input() @BooleanFieldValue() floatingPlaceholder: boolean = true;\r\n  @Input() hintLabel: string = '';\r\n\r\n  @Input() autoComplete: string;\r\n  @Input() autoCorrect: string;\r\n  @Input() autoCapitalize: string;\r\n  @Input() @BooleanFieldValue() autoFocus: boolean = false;\r\n  @Input() @BooleanFieldValue() disabled: boolean = false;\r\n  @Input() id: string = `md-input-${nextUniqueId++}`;\r\n  @Input() list: string = null;\r\n  @Input() max: string | number = null;\r\n  @Input() maxLength: number = null;\r\n  @Input() min: string | number = null;\r\n  @Input() minLength: number = null;\r\n  @Input() placeholder: string = null;\r\n  @Input() @BooleanFieldValue() readOnly: boolean = false;\r\n  @Input() @BooleanFieldValue() required: boolean = false;\r\n  @Input() @BooleanFieldValue() spellCheck: boolean = false;\r\n  @Input() step: number = null;\r\n  @Input() tabIndex: number = null;\r\n  @Input() type: string = 'text';\r\n  @Input() name: string = null;\r\n\r\n  private _blurEmitter: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\r\n  private _focusEmitter: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\r\n\r\n  @Output('blur')\r\n  get onBlur(): Observable<FocusEvent> {\r\n    return this._blurEmitter.asObservable();\r\n  }\r\n\r\n  @Output('focus')\r\n  get onFocus(): Observable<FocusEvent> {\r\n    return this._focusEmitter.asObservable();\r\n  }\r\n\r\n  get value(): any { return this._value; };\r\n  @Input() set value(v: any) {\r\n    v = this._convertValueForInputType(v);\r\n    if (v !== this._value) {\r\n      this._value = v;\r\n      this._onChangeCallback(v);\r\n    }\r\n  }\r\n\r\n  // This is to remove the `align` property of the `md-input` itself. Otherwise HTML5\r\n  // might place it as RTL when we don't want to. We still want to use `align` as an\r\n  // Input though, so we use HostBinding.\r\n  @HostBinding('attr.align') get _align(): any { return null; }\r\n\r\n\r\n  @ViewChild('input') _inputElement: ElementRef;\r\n\r\n  /** Set focus on input */\r\n  focus() {\r\n    this._inputElement.nativeElement.focus();\r\n  }\r\n\r\n  _handleFocus(event: FocusEvent) {\r\n    this._focused = true;\r\n    this._focusEmitter.emit(event);\r\n  }\r\n\r\n  _handleBlur(event: FocusEvent) {\r\n    this._focused = false;\r\n    this._onTouchedCallback();\r\n    this._blurEmitter.emit(event);\r\n  }\r\n\r\n  _handleChange(event: Event) {\r\n    this.value = (<HTMLInputElement>event.target).value;\r\n    this._onTouchedCallback();\r\n  }\r\n\r\n  _hasPlaceholder(): boolean {\r\n    return !!this.placeholder || this._placeholderChild != null;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   * TODO: internal\r\n   */\r\n  writeValue(value: any) {\r\n    this._value = value;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   * TODO: internal\r\n   */\r\n  registerOnChange(fn: any) {\r\n    this._onChangeCallback = fn;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   * TODO: internal\r\n   */\r\n  registerOnTouched(fn: any) {\r\n    this._onTouchedCallback = fn;\r\n  }\r\n\r\n  /** TODO: internal */\r\n  ngAfterContentInit() {\r\n    this._validateConstraints();\r\n\r\n    // Trigger validation when the hint children change.\r\n    this._hintChildren.changes.subscribe(() => {\r\n      this._validateConstraints();\r\n    });\r\n  }\r\n\r\n  /** TODO: internal */\r\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\r\n    this._validateConstraints();\r\n  }\r\n\r\n  /**\r\n   * Convert the value passed in to a value that is expected from the type of the md-input.\r\n   * This is normally performed by the *_VALUE_ACCESSOR in forms, but since the type is bound\r\n   * on our internal input it won't work locally.\r\n   * @private\r\n   */\r\n  private _convertValueForInputType(v: any): any {\r\n    switch (this.type) {\r\n      case 'number': return parseFloat(v);\r\n      default: return v;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that all constraints defined by the API are validated, or throw errors otherwise.\r\n   * Constraints for now:\r\n   *   - placeholder attribute and <md-placeholder> are mutually exclusive.\r\n   *   - type attribute is not one of the forbidden types (see constant at the top).\r\n   *   - Maximum one of each `<md-hint>` alignment specified, with the attribute being\r\n   *     considered as align=\"start\".\r\n   * @private\r\n   */\r\n  private _validateConstraints() {\r\n    if (this.placeholder != '' && this.placeholder != null && this._placeholderChild != null) {\r\n      throw new MdInputPlaceholderConflictError();\r\n    }\r\n    if (MD_INPUT_INVALID_INPUT_TYPE.indexOf(this.type) != -1) {\r\n      throw new MdInputUnsupportedTypeError(this.type);\r\n    }\r\n\r\n    if (this._hintChildren) {\r\n      // Validate the hint labels.\r\n      let startHint: MdHint = null;\r\n      let endHint: MdHint = null;\r\n      this._hintChildren.forEach((hint: MdHint) => {\r\n        if (hint.align == 'start') {\r\n          if (startHint || this.hintLabel) {\r\n            throw new MdInputDuplicatedHintError('start');\r\n          }\r\n          startHint = hint;\r\n        } else if (hint.align == 'end') {\r\n          if (endHint) {\r\n            throw new MdInputDuplicatedHintError('end');\r\n          }\r\n          endHint = hint;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport const MD_INPUT_DIRECTIVES = [MdPlaceholder, MdInput, MdHint];\r\n"]}