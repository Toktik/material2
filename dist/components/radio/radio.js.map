{"version":3,"file":"radio.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/components/radio/radio.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n  forwardRef,\r\n} from '@angular/core';\r\nimport {\r\n  NG_VALUE_ACCESSOR,\r\n  ControlValueAccessor\r\n} from '@angular/forms';\r\nimport {\r\n  MdUniqueSelectionDispatcher\r\n} from '@angular2-material/core/coordination/unique-selection-dispatcher';\r\n\r\n\r\n// Re-exports.\r\nexport {\r\n  MdUniqueSelectionDispatcher\r\n} from '@angular2-material/core/coordination/unique-selection-dispatcher';\r\n\r\n\r\n\r\n/**\r\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\r\n * allows it to support [(ngModel)] and ngControl.\r\n */\r\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdRadioGroup),\r\n  multi: true\r\n};\r\n\r\n// TODO(mtlin):\r\n// Ink ripple is currently placeholder.\r\n// Determine motion spec for button transitions.\r\n// Design review.\r\n// RTL\r\n// Support forms API.\r\n// Use ChangeDetectionStrategy.OnPush\r\n\r\nvar _uniqueIdCounter = 0;\r\n\r\n/** A simple change event emitted by either MdRadioButton or MdRadioGroup. */\r\nexport class MdRadioChange {\r\n  source: MdRadioButton;\r\n  value: any;\r\n}\r\n\r\n@Directive({\r\n  selector: 'md-radio-group',\r\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\r\n  host: {\r\n    'role': 'radiogroup',\r\n  },\r\n})\r\nexport class MdRadioGroup implements AfterContentInit, ControlValueAccessor {\r\n  /**\r\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\r\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\r\n   * radio button, this value persists to be applied in case a new radio button is added with a\r\n   * matching value.\r\n   */\r\n  private _value: any = null;\r\n\r\n  /** The HTML name attribute applied to radio buttons in this group. */\r\n  private _name: string = `md-radio-group-${_uniqueIdCounter++}`;\r\n\r\n  /** Disables all individual radio buttons assigned to this group. */\r\n  private _disabled: boolean = false;\r\n\r\n  /** The currently selected radio button. Should match value. */\r\n  private _selected: MdRadioButton = null;\r\n\r\n  /** Whether the `value` has been set to its initial value. */\r\n  private _isInitialized: boolean = false;\r\n\r\n  /** The method to be called in order to update ngModel */\r\n  private _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\r\n\r\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\r\n  onTouched: () => any = () => {};\r\n\r\n  /** Event emitted when the group value changes. */\r\n  @Output()\r\n  change: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\r\n\r\n  /** Child radio buttons. */\r\n  @ContentChildren(forwardRef(() => MdRadioButton))\r\n  _radios: QueryList<MdRadioButton> = null;\r\n\r\n  @Input()\r\n  get name(): string {\r\n    return this._name;\r\n  }\r\n\r\n  set name(value: string) {\r\n    this._name = value;\r\n    this._updateRadioButtonNames();\r\n  }\r\n\r\n  @Input() align: 'start' | 'end';\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  set disabled(value) {\r\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\r\n    this._disabled = (value != null && value !== false) ? true : null;\r\n  }\r\n\r\n  @Input()\r\n  get value(): any {\r\n    return this._value;\r\n  }\r\n\r\n  set value(newValue: any) {\r\n    if (this._value != newValue) {\r\n      // Set this before proceeding to ensure no circular loop occurs with selection.\r\n      this._value = newValue;\r\n\r\n      this._updateSelectedRadioFromValue();\r\n\r\n      // Only fire a change event if this isn't the first time the value is ever set.\r\n      if (this._isInitialized) {\r\n        this._emitChangeEvent();\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  get selected() {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(selected: MdRadioButton) {\r\n    this._selected = selected;\r\n    this.value = selected ? selected.value : null;\r\n\r\n    if (selected && !selected.checked) {\r\n      selected.checked = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize properties once content children are available.\r\n   * This allows us to propagate relevant attributes to associated buttons.\r\n   * TODO: internal\r\n   */\r\n  ngAfterContentInit() {\r\n    // Mark this component as initialized in AfterContentInit because the initial value can\r\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\r\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\r\n   * radio buttons upon their blur.\r\n   */\r\n  _touch() {\r\n    if (this.onTouched) {\r\n      this.onTouched();\r\n    }\r\n  }\r\n\r\n  private _updateRadioButtonNames(): void {\r\n    (this._radios || []).forEach(radio => {\r\n      radio.name = this.name;\r\n    });\r\n  }\r\n\r\n  /** Updates the `selected` radio button from the internal _value state. */\r\n  private _updateSelectedRadioFromValue(): void {\r\n    // If the value already matches the selected radio, do nothing.\r\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\r\n\r\n    if (this._radios != null && !isAlreadySelected) {\r\n      let matchingRadio = this._radios.filter(radio => radio.value == this._value)[0];\r\n\r\n      if (matchingRadio) {\r\n        this.selected = matchingRadio;\r\n      } else if (this.value == null) {\r\n        this.selected = null;\r\n        this._radios.forEach(radio => { radio.checked = false; });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Dispatch change event with current selection and group value. */\r\n  private _emitChangeEvent(): void {\r\n    let event = new MdRadioChange();\r\n    event.source = this._selected;\r\n    event.value = this._value;\r\n    this._controlValueAccessorChangeFn(event.value);\r\n    this.change.emit(event);\r\n  }\r\n\r\n  /**\r\n    * Implemented as part of ControlValueAccessor.\r\n    * TODO: internal\r\n    */\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   * TODO: internal\r\n   */\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of ControlValueAccessor.\r\n   * TODO: internal\r\n   */\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-radio-button',\r\n  templateUrl: 'radio.html',\r\n  styleUrls: ['radio.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    '(click)': '_onClick($event)'\r\n  }\r\n})\r\nexport class MdRadioButton implements OnInit {\r\n  @HostBinding('class.md-radio-focused')\r\n  _isFocused: boolean;\r\n\r\n  /** Whether this radio is checked. */\r\n  private _checked: boolean = false;\r\n\r\n  /** The unique ID for the radio button. */\r\n  @HostBinding('id')\r\n  @Input()\r\n  id: string = `md-radio-${_uniqueIdCounter++}`;\r\n\r\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\r\n  @Input()\r\n  name: string;\r\n\r\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\r\n  @Input('aria-labelledby') ariaLabelledby: string;\r\n\r\n  /** Whether this radio is disabled. */\r\n  private _disabled: boolean;\r\n\r\n  /** Value assigned to this radio.*/\r\n  private _value: any = null;\r\n\r\n  /** The parent radio group. May or may not be present. */\r\n  radioGroup: MdRadioGroup;\r\n\r\n  /** Event emitted when the group value changes. */\r\n  @Output()\r\n  change: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\r\n\r\n  constructor(@Optional() radioGroup: MdRadioGroup,\r\n              public radioDispatcher: MdUniqueSelectionDispatcher) {\r\n    // Assertions. Ideally these should be stripped out by the compiler.\r\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\r\n\r\n    this.radioGroup = radioGroup;\r\n\r\n    radioDispatcher.listen((id: string, name: string) => {\r\n      if (id != this.id && name == this.name) {\r\n        this.checked = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  get inputId(): string {\r\n    return `${this.id}-input`;\r\n  }\r\n\r\n  @HostBinding('class.md-radio-checked')\r\n  @Input()\r\n  get checked(): boolean {\r\n    return this._checked;\r\n  }\r\n\r\n  set checked(newCheckedState: boolean) {\r\n    if (newCheckedState) {\r\n      // Notify all radio buttons with the same name to un-check.\r\n      this.radioDispatcher.notify(this.id, this.name);\r\n    }\r\n\r\n    if (newCheckedState != this._checked) {\r\n      this._emitChangeEvent();\r\n    }\r\n\r\n    this._checked = newCheckedState;\r\n\r\n    if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\r\n      this.radioGroup.selected = this;\r\n    }\r\n  }\r\n\r\n  /** MdRadioGroup reads this to assign its own value. */\r\n  @Input()\r\n  get value(): any {\r\n    return this._value;\r\n  }\r\n\r\n  set value(value: any) {\r\n    if (this._value != value) {\r\n      if (this.radioGroup != null && this.checked) {\r\n        this.radioGroup.value = value;\r\n      }\r\n      this._value = value;\r\n    }\r\n  }\r\n\r\n  private _align: 'start' | 'end';\r\n\r\n  @Input()\r\n  get align(): 'start' | 'end' {\r\n    return this._align || (this.radioGroup != null && this.radioGroup.align) || 'start';\r\n  }\r\n\r\n  set align(value: 'start' | 'end') {\r\n    this._align = value;\r\n  }\r\n\r\n  @HostBinding('class.md-radio-disabled')\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\r\n  }\r\n\r\n  set disabled(value: boolean) {\r\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\r\n    this._disabled = (value != null && value !== false) ? true : null;\r\n  }\r\n\r\n  /** TODO: internal */\r\n  ngOnInit() {\r\n    if (this.radioGroup) {\r\n      // If the radio is inside a radio group, determine if it should be checked\r\n      this.checked = this.radioGroup.value === this._value;\r\n      // Copy name from parent radio group\r\n      this.name = this.radioGroup.name;\r\n    }\r\n  }\r\n\r\n  /** Dispatch change event with current value. */\r\n  private _emitChangeEvent(): void {\r\n    let event = new MdRadioChange();\r\n    event.source = this;\r\n    event.value = this._value;\r\n    this.change.emit(event);\r\n  }\r\n\r\n  _onClick(event: Event) {\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      return;\r\n    }\r\n\r\n    if (this.radioGroup != null) {\r\n      // Propagate the change one-way via the group, which will in turn mark this\r\n      // button as checked.\r\n      this.radioGroup.selected = this;\r\n      this.radioGroup._touch();\r\n    } else {\r\n      this.checked = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * We use a hidden native input field to handle changes to focus state via keyboard navigation,\r\n   * with visual rendering done separately. The native element is kept in sync with the overall\r\n   * state of the component.\r\n   */\r\n  _onInputFocus() {\r\n    this._isFocused = true;\r\n  }\r\n\r\n  _onInputBlur() {\r\n    this._isFocused = false;\r\n    if (this.radioGroup) {\r\n      this.radioGroup._touch();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks the radio due to an interaction with the underlying native <input type=\"radio\">\r\n   */\r\n  _onInputChange(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n\r\n    this.checked = true;\r\n    if (this.radioGroup) {\r\n      this.radioGroup._touch();\r\n    }\r\n  }\r\n}\r\n\r\nexport const MD_RADIO_DIRECTIVES = [MdRadioGroup, MdRadioButton];\r\n"]}