{"version":3,"file":"button.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/components/button/button.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Component,\r\n  ViewEncapsulation,\r\n  Input,\r\n  HostBinding,\r\n  ChangeDetectionStrategy,\r\n  ElementRef,\r\n  Renderer,\r\n  Type,\r\n} from '@angular/core';\r\n\r\n// TODO(jelbourn): Ink ripples.\r\n// TODO(jelbourn): Make the `isMouseDown` stuff done with one global listener.\r\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'button[md-button], button[md-raised-button], button[md-icon-button], ' +\r\n            'button[md-fab], button[md-mini-fab]',\r\n  inputs: ['color'],\r\n  host: {\r\n    '[class.md-button-focus]': '_isKeyboardFocused',\r\n    '(mousedown)': '_setMousedown()',\r\n    '(focus)': '_setKeyboardFocus()',\r\n    '(blur)': '_removeKeyboardFocus()',\r\n  },\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MdButton {\r\n  private _color: string;\r\n\r\n  /** Whether the button has focus from the keyboard (not the mouse). Used for class binding. */\r\n  _isKeyboardFocused: boolean = false;\r\n\r\n  /** Whether a mousedown has occurred on this element in the last 100ms. */\r\n  _isMouseDown: boolean = false;\r\n\r\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer) { }\r\n\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n\r\n  set color(value: string) {\r\n    this._updateColor(value);\r\n  }\r\n\r\n  _setMousedown() {\r\n    // We only *show* the focus style when focus has come to the button via the keyboard.\r\n    // The Material Design spec is silent on this topic, and without doing this, the\r\n    // button continues to look :active after clicking.\r\n    // @see http://marcysutton.com/button-focus-hell/\r\n    this._isMouseDown = true;\r\n    setTimeout(() => { this._isMouseDown = false; }, 100);\r\n  }\r\n\r\n  _updateColor(newColor: string) {\r\n    this._setElementColor(this._color, false);\r\n    this._setElementColor(newColor, true);\r\n    this._color = newColor;\r\n  }\r\n\r\n  _setElementColor(color: string, isAdd: boolean) {\r\n    if (color != null && color != '') {\r\n      this._renderer.setElementClass(this._elementRef.nativeElement, `md-${color}`, isAdd);\r\n    }\r\n  }\r\n\r\n  _setKeyboardFocus() {\r\n    this._isKeyboardFocused = !this._isMouseDown;\r\n  }\r\n\r\n  _removeKeyboardFocus() {\r\n    this._isKeyboardFocused = false;\r\n  }\r\n\r\n  /** TODO(hansl): e2e test this function. */\r\n  focus() {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab]',\r\n  inputs: ['color'],\r\n  host: {\r\n    '[class.md-button-focus]': '_isKeyboardFocused',\r\n    '(mousedown)': '_setMousedown()',\r\n    '(focus)': '_setKeyboardFocus()',\r\n    '(blur)': '_removeKeyboardFocus()',\r\n    '(click)': '_haltDisabledEvents($event)',\r\n  },\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class MdAnchor extends MdButton {\r\n  _disabled: boolean = null;\r\n\r\n  constructor(elementRef: ElementRef, renderer: Renderer) {\r\n    super(elementRef, renderer);\r\n  }\r\n\r\n  @HostBinding('tabIndex')\r\n  get tabIndex(): number {\r\n    return this.disabled ? -1 : 0;\r\n  }\r\n\r\n  @HostBinding('attr.aria-disabled')\r\n  /** Gets the aria-disabled value for the component, which must be a string for Dart. */\r\n  get isAriaDisabled(): string {\r\n    return this.disabled ? 'true' : 'false';\r\n  }\r\n\r\n  @HostBinding('attr.disabled')\r\n  @Input('disabled')\r\n  get disabled() { return this._disabled; }\r\n\r\n  set disabled(value: boolean) {\r\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\r\n    this._disabled = (value != null && value != false) ? true : null;\r\n  }\r\n\r\n  _haltDisabledEvents(event: Event) {\r\n    // A disabled button shouldn't apply any actions\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n      event.stopImmediatePropagation();\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport const MD_BUTTON_DIRECTIVES: Type[] = [MdButton, MdAnchor];\r\n"]}