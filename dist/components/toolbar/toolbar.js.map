{"version":3,"file":"toolbar.js","sourceRoot":"","sources":["file:///C:/projects/material2/tmp/broccoli_type_script_compiler-input_base_path-2PVWyBBf.tmp/0/src/demo-app/components/toolbar/toolbar.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAKO,eAAe,CAAC,CAAA;AACvB,qBAAuB,eAAe,CAAC,CAAA;AACvC,qBAAyB,eAAe,CAAC,CAAA;AAUzC;IAIE,mBAAoB,UAAsB,EAAU,QAAkB;QAAlD,eAAU,GAAV,UAAU,CAAY;QAAU,aAAQ,GAAR,QAAQ,CAAU;IAAI,CAAC;IAG3E,sBAAI,4BAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;aAED,UAAU,KAAa;YACrB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC;;;OAJA;IAMO,gCAAY,GAApB,UAAqB,QAAgB;QACnC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzB,CAAC;IAEO,oCAAgB,GAAxB,UAAyB,KAAa,EAAE,KAAc;QACpD,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,QAAM,KAAO,EAAE,KAAK,CAAC,CAAC;QACrF,CAAC;IACH,CAAC;IAnBD;QAAC,YAAK,EAAE;;0CAAA;IAdV;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,YAAY;YACtB,WAAW,EAAE,cAAc;YAC3B,SAAS,EAAE,CAAC,aAAa,CAAC;YAC1B,eAAe,EAAE,8BAAuB,CAAC,MAAM;YAC/C,aAAa,EAAE,wBAAiB,CAAC,IAAI;SACtC,CAAC;;iBAAA;IA4BF,gBAAC;AAAD,CAAC,AA3BD,IA2BC;AA3BY,iBAAS,YA2BrB,CAAA;AAEY,6BAAqB,GAAG,CAAC,SAAS,CAAC,CAAC","sourcesContent":["import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  Input,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {Renderer} from '@angular/core';\r\nimport {ElementRef} from '@angular/core';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-toolbar',\r\n  templateUrl: 'toolbar.html',\r\n  styleUrls: ['toolbar.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class MdToolbar {\r\n\r\n  private _color: string;\r\n\r\n  constructor(private elementRef: ElementRef, private renderer: Renderer) { }\r\n\r\n  @Input()\r\n  get color(): string {\r\n    return this._color;\r\n  }\r\n\r\n  set color(value: string) {\r\n    this._updateColor(value);\r\n  }\r\n\r\n  private _updateColor(newColor: string) {\r\n    this._setElementColor(this._color, false);\r\n    this._setElementColor(newColor, true);\r\n    this._color = newColor;\r\n  }\r\n\r\n  private _setElementColor(color: string, isAdd: boolean) {\r\n    if (color != null && color != '') {\r\n      this.renderer.setElementClass(this.elementRef.nativeElement, `md-${color}`, isAdd);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport const MD_TOOLBAR_DIRECTIVES = [MdToolbar];\r\n"]}